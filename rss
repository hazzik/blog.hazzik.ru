<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Hazzik's blog</title>
 <link href="http://blog.hazzik.ru/atom.xml" rel="self"/>
 <link href="http://blog.hazzik.ru/"/>
 <updated>2014-07-04T14:00:05+12:00</updated>
 <id>http://blog.hazzik.ru</id>
 <author>
   <name>Alexander Zaytsev</name>
   <email></email>
 </author>

 
 <entry>
   <title>Connascence</title>
   <link href="http://blog.hazzik.ru/2014/07/04/connascence/"/>
   <updated>2014-07-04T13:55:24+12:00</updated>
   <id>http://blog.hazzik.ru/2014/07/04/connascence</id>
   <content type="html">&lt;p&gt;Для меня это очень странно, но данный термин или практика не получили широкого распространения в рускоязычном мире разработки ПО, и, видимо, по-этому данный термин даже не имеет перевода. &lt;a href=&quot;http://www.thefreedictionary.com/Connascence&quot;&gt;Подсмотрим&lt;/a&gt; в The Free Dictionary что же это слово означает:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Con`nas´cence, существительное

1.  Одновременное рождение двух или более; одновременное производство двух и более вместе.
2.  То, что было рождено или произведено вместе с другим.
3.  Акт совместного взросления.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Я позволю себе перевести термин &lt;strong&gt;Connascence&lt;/strong&gt; как &amp;quot;близнецовая связь&amp;quot;. Итак, далее будет приблизительный перевод &lt;a href=&quot;https://en.wikipedia.org/wiki/Connascence_(computer_programming)&quot;&gt;статьи&lt;/a&gt; из англоязычной Википедии.&lt;/p&gt;

&lt;p&gt;В разработке программного обеспечения два компонента обладают близнецовой связью (&lt;strong&gt;Connascence&lt;/strong&gt;), если изменение в одном компоненте будут требовать изменение других компонентов для поддержания общей корректности всей системы.&lt;/p&gt;

&lt;p&gt;Connescence – это метрика качества программного обеспечения разарботанная Меилиром Пейдж-Джонсом (Meilir Page-Jones) чтобы разрешить рассуждения о сложности, вызванные отношениями зависимости в объектно-ориентированном дизайне, подобно тому, как это делает связанность (coupling) в структурном дизайне. В дополнение, к возможности категоризировать отношения, &amp;quot;близнецовая связь&amp;quot; также предоставляет систему для сравнения различных типов зависимостей. Такое сравнение часто подсказывает пути улучшения качества программного обеспечения.&lt;/p&gt;

&lt;h1&gt;Метрики&lt;/h1&gt;

&lt;h2&gt;Сила&lt;/h2&gt;

&lt;p&gt;Форма &amp;quot;близнецовой связи&amp;quot; считается более сильной, если требует больших компенсационных изменений в связанных элементах. Чем сильнее связь, тем сложнее и затратнее совершить изменения в связанных компонентах.&lt;/p&gt;

&lt;h2&gt;Степень&lt;/h2&gt;

&lt;p&gt;Приемлемость связи связана со степенью ее возникновения. Связь, обладающая низкой степенью, может быть приемлемой, но связь, обладающая высокой степенью, не должна быть приемлема. Например, функция или метод, который принимает два аргумента обычно считаются приемлемымы. Однако это обычно неприемлемо для функций или методов принимать десять аргументов. Элементы с высокой степенью &amp;quot;близнецовой связи&amp;quot; требуют боллее сложных и затратных изменений, чем элементы, которые имеют более низкий уровень связи.&lt;/p&gt;

&lt;h2&gt;Локальность&lt;/h2&gt;

&lt;p&gt;Локальность имеет значение при анализе &amp;quot;близнецовой связи&amp;quot;. Сильные формы &amp;quot;близнецовой связи&amp;quot; приемлемы, если связанные элементы  расположены достаточно близко. Например, некоторые языки используют позиционные аргументы для вызова функций или методов. Эта &amp;quot;близнецовая связть по месту&amp;quot; приемлема из-за близкого расположения вызвающего и вызываемого кода, но вызов веб сервиса с использованием позицонных аргументов неприемлео, из-за достаточной отдаленности и несвязанности компонентов. &amp;quot;Близнецовые связи&amp;quot; с теми же силой и степенью будут иметь большую сложность и стоимость изменений, чем дальше связанные компоненты расположены.&lt;/p&gt;

&lt;h1&gt;Типы &amp;quot;близнецовых связей&amp;quot;&lt;/h1&gt;

&lt;p&gt;Далее представлен список близнецовых связей , остортированный приблизительно, от слабых до сильных.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по имени (Connescence of Name – CoN)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по имени возникает, когда несколько компонентов должны согласовать имя сущности. Например, такой связью является имя метода: если имя метода изменяется, то вызывающий код должен быть изменен, так, чтобы использовать новое имя метода.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по типу (Connescence of Type – CoT)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по типу возникает, когда несколько компонентов должны согласовать тип сущности. В статически типизированных языках программирования, тип аргументов метода может являтся образцом такой связи. Например, если метод изменит тип принимаемого аргумента с целого (integer) на строку (string), то вызывающий код должен быть изменен, так, чтобы отразить эти изменения.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по смыслу (Connescence of Meaning – CoM)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по смыслу возникает, когда несколько компонентов должны согласовать смысл каких-то значений. Например, возврашение из метода 0 и 1 для обозначения true и false соответсвенно.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по месту (Connescence of Position – CoP)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по месту (по позиции, по расположению) возникает, когда несколько компонентов должны согласовать порядок значений. Примером близнецовой связи по месту могут служить позиционные аргументы в методе. Вызвающий и вызываемый код должны согласиться с семантикой первого, воторого и т.д. параметров.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по алгоритму (Connescence of Algorithm – CoA)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по алгоритму возникает, когда несколько компонентов должны использовать определенный алгоритм.   &lt;/p&gt;

&lt;h2&gt;Близнецовая связь по исполнению (Connescence of Execution – CoE)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по исполнению возникает, когда важен порядок вызова компоентов.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по времени (Connescence of Timing – CoT)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по исполнению возникает, когда важено время выполнения каждого из компоентов.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по значениям (Connescence of Values – CoV)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по значениям возникает, когда несколько значений должны изменяться одновременно.&lt;/p&gt;

&lt;h2&gt;Близнецовая связь по идентификатору (Connescence of Identity – CoI)&lt;/h2&gt;

&lt;p&gt;Близнецовая связь по идентификатору возникает, когда несколько компонетов должны ссылаться на какую-то сущность.&lt;/p&gt;

&lt;h1&gt;Уменьшение &amp;quot;близнецовой связи&amp;quot;&lt;/h1&gt;

&lt;p&gt;Уменьшение &amp;quot;близнецовой связи&amp;quot; будет уменьшать стоимость изменения программной системы. Один из путей уменьшения &amp;quot;близнецовой связи&amp;quot; - это замена более сильных связей более слабыми. Другой путь - это уменьшение степени и увеличение локальности связанных элементов.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Блог переехал на Jekyll и GitHub Pages</title>
   <link href="http://blog.hazzik.ru/2014/05/28/the-blog-has-been-moved-to-jekyll/"/>
   <updated>2014-05-28T17:10:57+12:00</updated>
   <id>http://blog.hazzik.ru/2014/05/28/the-blog-has-been-moved-to-jekyll</id>
   <content type="html">&lt;p&gt;Перевел блог с tumblr на Jekyll и GitHub Pages. Вроде-бы миграция прошла отлично, и все работает.&lt;/p&gt;

&lt;h2&gt;Некоторые причны этого.&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Хотел писать посты в markdown. По этой же причине в прошлый раз перешел на Tumblr.&lt;/li&gt;
&lt;li&gt;Бесплатный хостинг)&lt;/li&gt;
&lt;li&gt;Полный контроль над блогом. Tumblr любит добавлять всякие свои виджеты. Бррр.&lt;/li&gt;
&lt;li&gt;Блог по-умолчанию под контролем версий. Tumblr грешил с тем, что иногда верстка постов слетала и приходилось все исправлять. &lt;/li&gt;
&lt;li&gt;Если нашли ошибку, то можете послать мне pull-request (Для этого нужно нажать на иконку с карандашом &lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; рядом с заголовком поста).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;RSS/Atom&lt;/h2&gt;

&lt;p&gt;Если вы читали меня через RSS (надеюсь, что кто-то еще читает меня и ждет, когда я тут что-нибдуь напишу), но не через &lt;a href=&quot;http://feedburner.com&quot;&gt;feedburner.com&lt;/a&gt;, то пожалуйста, обновите свои закладки на &lt;a href=&quot;http://blog.hazzik.ru/atom.xml&quot;&gt;blog.hazzik.ru/atom.xml&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;PS&lt;/h2&gt;

&lt;p&gt;Надеюсь, что буду писать чаще. Честно-честно.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Читайте меня на английском</title>
   <link href="http://blog.hazzik.ru/2013/03/04/in-english/"/>
   <updated>2013-03-04T19:44:00+12:00</updated>
   <id>http://blog.hazzik.ru/2013/03/04/in-english</id>
   <content type="html">&lt;p&gt;Привет, сегодня, наконец-то, завел себе блог &lt;a href=&quot;http://alexzaytsev.me&quot;&gt;на английском&lt;/a&gt;. Первое время буду публиковать туда переводы отсюда, затем весь новый контент буду публиковать там, а сюда, по возможности, буду постить переводы.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Вычисляемые поля для любого LINQ-провайдера</title>
   <link href="http://blog.hazzik.ru/2012/10/24/delegatedecompiler/"/>
   <updated>2012-10-24T07:56:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/10/24/delegatedecompiler</id>
   <content type="html">&lt;p&gt;Сегодня я хочу рассказать, о маленькой библиотеке, которую я написал недавно на коленке всего за несколько часов. Эта библиотека может декомпилировать методы в их λ-представление.&lt;/p&gt;

&lt;p&gt;Зачем это может понадобиться - под катом. &lt;!-- more --&gt;&lt;/p&gt;

&lt;h4&gt;Intro&lt;/h4&gt;

&lt;p&gt;В жизни случается, что в LINQ нужно использовать вычисляемое поле, к примеру у нас есть класс &lt;i&gt;Employee&lt;/i&gt; с вычисляемым полем &lt;i&gt;FullName&lt;/i&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Employee
{
    public string FullName
    {
        get { return FirstName + &quot; &quot; + LastName; }
    }

    public string LastName { get; set; }

    public string FirstName { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И тут к вам приходит заказчик и говорит, что нам нужно добавить поиск по полному имени сотрудника. Вы недолго думаете берете и пишите следующий запрос:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var employees = (from employee in db.Employees
                 where (employee.FirstName + &quot; &quot; + employee.LastName) == &quot;Test User&quot;
                 select employee).ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Да, с таким простым полем, как &lt;i&gt;FullName&lt;/i&gt; так можно поступить, но что делать, если поле не такое простое? Вот к примеру, вычисляемое поле из одного из проектов, в котором я учавствовал.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WayPoint 
{
    // все остальное опущено в целях наглядности
    public virtual bool IsValid
    {
        get 
        {
            return (Account == null) ||
               (Role == null || Account.Role == Role) &amp;amp;&amp;amp;
               (StructuralUnit == null || Account.State.StructuralUnit == StructuralUnit);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;С этим сложнее. Итак, приступим. Что же у нас есть для решения таких задач?&lt;/p&gt;

&lt;h4&gt;&amp;lt;formula&amp;gt; в NHibernate&lt;/h4&gt;

&lt;p&gt;Если вы используете NHibernate, то можете замапить данное поле как формулу, но этот путь не очень дружелюбен к рефакторингу, к тому же &amp;lt;formula&amp;gt; поддерживает только sql, и если вы пишете приложение, которое планируется использовать с разными базами данных, то здесь вам нужно быть особенно осторожными.&lt;/p&gt;

&lt;p&gt;Поддреживается только в NHibernate.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;http://damieng.com/blog/2009/06/24/client-side-properties-and-any-remote-linq-provider&quot;&gt;Microsoft.Linq.Translations&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Для этого необходимо переписать наш класс и запрос следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Employee 
{
    private static readonly CompiledExpression&amp;lt;Employee,string&amp;gt; fullNameExpression
     = DefaultTranslationOf&amp;lt;Employee&amp;gt;.Property(e =&amp;gt; e.FullName).Is(e =&amp;gt; e.FirstName + &quot; &quot; + e.LastName);

    public string FullName 
    {
        get { return fullNameExpression.Evaluate(this); }
    }

    public string LastName { get; set; }

    public string FirstName { get; set; }
}

var employees = (from employee in db.Employees
                 where employee.FullName == &quot;Test User&quot;
                 select employee).WithTranslations().ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Все хорошо, запрос выглядит красиво, а вот объявление свойства - просто ужасно. К тому же Evaluate компилирует&amp;#160;?-выражение в момент исполнения, что, на мой взгляд не менее ужасно, чем задание вычисляемого поля.&lt;/p&gt;

&lt;p&gt;И, наконец, мы подошли к моему творениею - DelegateDecompiler&lt;/p&gt;

&lt;h4&gt;DelegateDecompiler&lt;/h4&gt;

&lt;p&gt;Все что нужно, это вычисляемое поля пометить атрибутом &lt;i&gt;[Computed]&lt;/i&gt;, а запрос преобразовать с помощью метода &lt;i&gt;.Decompile()&lt;/i&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Employee 
{
    [Computed]
    public string FullName 
    {
        get { return FirstName + &quot; &quot; + LastName; }
    }

    public string LastName { get; set; }

    public string FirstName { get; set; }
}

var employees = (from employee in db.Employees
                 where employee.FullName == &quot;Test User&quot;
                 select employee).Decompile().ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;По-моему изящно (сам не похвалишь - никто не похвалит)&lt;/p&gt;

&lt;p&gt;При вызове &lt;i&gt;.Decompile()&lt;/i&gt; декомпилятор найдет все свойства и методы, помеченные атрибутом &lt;i&gt;[Computed]&lt;/i&gt; и развернет их. Т.е. запрос будет преобразован к виду, из первоначального примера:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var employees = (from employee in db.Employees
                 where (employee.FirstName + &quot; &quot; + employee.LastName) == &quot;Test User&quot;
                 select employee).ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Библиотечка в качестве декомпилятора использует Mono.Reflection (&lt;a href=&quot;https://github.com/jbevain/mono.reflection/&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://nuget.org/packages/Mono.Reflection&quot;&gt;NuGet&lt;/a&gt;) от &lt;a href=&quot;http://evain.net&quot;&gt;Jean-Baptiste Evain&lt;/a&gt; - создателя &lt;i&gt;Mono.Cecil&lt;/i&gt;. Сама &lt;i&gt;Mono.Cecil&lt;/i&gt; не используется из-за ее громоздкости.&lt;/p&gt;

&lt;p&gt;PS: Естественно, то что внутри вычисляемого поля должно поддерживаться вашим LINQ-провайдером.
PPS: Это альфа-версия очень далекая от релиза - используйте на свой страх и риск.&lt;/p&gt;

&lt;h4&gt;Ссылки&lt;/h4&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/hazzik/DelegateDecompiler&quot;&gt;Исходный код на GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nuget.org/packages/DelegateDecompiler&quot;&gt;Пакет в NuGet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://habrahabr.ru/post/155437/&quot;&gt;Оригинал статьи на habrahabr.ru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>MvcExtensions: Quick Start Project Template</title>
   <link href="http://blog.hazzik.ru/2012/09/13/mvcextensions-quick-start-project-template/"/>
   <updated>2012-09-13T10:23:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/09/13/mvcextensions-quick-start-project-template</id>
   <content type="html">&lt;p&gt;Очень часто, когда кто-то пытается начать использовать &lt;a href=&quot;http://mvcextensions.github.com&quot;&gt;MvcExtensions&lt;/a&gt; у него появляются вопросы: с чего начать и как это использовать. Чтобы этих вопрос стало меньше создал проект &lt;a href=&quot;https://github.com/BrandyFx/ProjectTemplate&quot;&gt;ProjectTemplate&lt;/a&gt;. &lt;!--more--&gt;&lt;/p&gt;

&lt;h1&gt;Что внутри?&lt;/h1&gt;

&lt;ul&gt;&lt;li&gt;В качестве основного фреймворка выбран &lt;a href=&quot;http://asp.net/mvc&quot;&gt;ASP.NET MVC&lt;/a&gt; вместе с &lt;a href=&quot;http://mvcextensions.github.com&quot;&gt;MvcExtensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.castleproject.org/projects/windsor&quot;&gt;Castle.Windsor&lt;/a&gt; используется как IoC контейнер&lt;/li&gt;
&lt;li&gt;Для клиентской части используется &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://jqueryui.com&quot;&gt;jQuery UI&lt;/a&gt;, &lt;a href=&quot;http://modernizr.com&quot;&gt;Modernizr&lt;/a&gt; и &lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Скрипты и CSS сжимаются с помощью &lt;a href=&quot;http://www.nuget.org/packages/Microsoft.AspNet.Web.Optimization&quot;&gt;Microsoft.Web.Optimization&lt;/a&gt; + BundleTransformer (&lt;a href=&quot;http://www.nuget.org/packages/BundleTransformer.Less&quot;&gt;LESS&lt;/a&gt; и &lt;a href=&quot;http://www.nuget.org/packages/BundleTransformer.Yui&quot;&gt;YUI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Для логирования ошибок используется &lt;a href=&quot;http://code.google.com/p/elmah/&quot;&gt;ELMAH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Для сборки проекта используется &lt;a href=&quot;https://github.com/psake&quot;&gt;psake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Все это чудо настроено и просто работает&lt;/p&gt;

&lt;h1&gt;Как использовать?&lt;/h1&gt;

&lt;ol&gt;&lt;li&gt;Скачать (для &lt;a href=&quot;https://github.com/BrandyFx/ProjectTemplate/zipball/master&quot;&gt;MVC 4&lt;/a&gt;, &lt;a href=&quot;https://github.com/BrandyFx/ProjectTemplate/zipball/mvc3&quot;&gt;MVC 3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Распаковать*&lt;/li&gt;
&lt;li&gt;Открыть проект и добавить вашу логику&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;RROFIT!&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;*После распаковки я рекомендую создать git репозиторий и закоммитить туда первоначальную структуру&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt; git init
 &amp;gt; git add .
 &amp;gt; git commit -m &#39;Initial project strucure&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;PS&lt;/h1&gt;

&lt;p&gt;Жду ваших предложений по развитию проекта.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Как расширять и актуализировать знания</title>
   <link href="http://blog.hazzik.ru/2012/07/24/how-to-collect-knowledge/"/>
   <updated>2012-07-24T23:37:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/07/24/how-to-collect-knowledge</id>
   <content type="html">&lt;p&gt;Очень часто меня спрашивают (как знакомые, так и на собеседованиях), как я актуализирую свои знания. Рецепт очень прост. &lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Читайте блоги. В блогах всегда много новой информации, оттуда можно почерпнуть много новых идей и информации, которые еще не успели стать меинстримом. В моем списке подписок больше 100 блогов.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ведите блог. Так вы сможете найти единомышленников, а вместе легче развиваться.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Участвуйте в конференциях. Не обязательно быть докладчиком, можно быть внимательным слушателем и не стесняйтесь участвовать в кулуарных обсуждениях.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Станьте активным участником тематических групп, к примеру &lt;a href=&quot;http://groups.google.com/group/dotnetconf&quot;&gt;DotNetConf&lt;/a&gt;, и сервисов ВиО (вопросы и ответы), таких как &lt;a href=&quot;http://StackOverflow.com&quot;&gt;StackOverflow.com&lt;/a&gt;. Отвечая на интересные вопросы вы можете узнать для себя что-то новое.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ищите новые интересные компоненты, библиотеки и фреймворки. Я регулярно просматриваю что нового в &lt;a href=&quot;http://nuget.org/packages?sortOrder=package-created&quot;&gt;NuGet&lt;/a&gt; или что происходит на &lt;a href=&quot;https://github.com/languages/C%23&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Участвуйте в Open Source проектах. Не обязательно быть коммитером, достаточно просто быть в сообществе. Изучайте код, сообщайте об ошибках, пишите в листы рассылки и читайте их&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Читайте книги.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Чего вам не хватает в MvcExtensions?</title>
   <link href="http://blog.hazzik.ru/2012/07/20/mvcextensions-roadmap/"/>
   <updated>2012-07-20T07:02:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/07/20/mvcextensions-roadmap</id>
   <content type="html">&lt;p&gt;Скорее всего вы знаете, что кроме &lt;a href=&quot;http://nhforge.org&quot;&gt;NHibernate&lt;/a&gt; я еще занимаюсь проектом &lt;a href=&quot;http://mvcextensions.github.com&quot;&gt;MvcExtensions&lt;/a&gt;, недавно была выпущена &lt;a href=&quot;http://nuget.org/packages/MvcExtensions/2.5.0&quot;&gt;версия 2.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Вот примерный план на версию 3.0&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Build with psake&lt;/li&gt;
&lt;li&gt;Integration with WebActivator - this means that we will remove Bootstrapper tasks&lt;/li&gt;
&lt;li&gt;Integration with native MVC IoC adapters&lt;/li&gt;
&lt;li&gt;Conventional internationalization and localization&lt;/li&gt;
&lt;li&gt;Generic model binders&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;План лежит &lt;a href=&quot;https://github.com/MvcExtensions/Core/wiki/Roadmap&quot;&gt;тут&lt;/a&gt; и постепенно будет пополняться и со временем выполнятся. Список уже реализованных изменений &lt;a href=&quot;https://github.com/MvcExtensions/Core/wiki/Changes-From-2.5-to-3.0&quot;&gt;тут&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Я хочу узнать у вас, как у пользователей MvcExtensions, чего не хватает именно ВАМ. Пишите в комментариях.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NHibernate: маленькая хитрость при работе с Oracle или PostgreSQL</title>
   <link href="http://blog.hazzik.ru/2012/07/10/nhibernate-oracle-and-postgresql-tip/"/>
   <updated>2012-07-10T06:43:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/07/10/nhibernate-oracle-and-postgresql-tip</id>
   <content type="html">&lt;p&gt;В ADO.NET провайдерах для &lt;a href=&quot;http://www.oracle.com/database&quot;&gt;Oracle&lt;/a&gt;, &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; и, возможно, других есть одна неприятная особенность, которая может сказаться на производительности вашего приложения, если вы запрашиваете у сервера большие объемы данных: они не кэшируют вызовы метода &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.idatarecord.getordinal.aspx&quot;&gt;IDataReader.GetOrdinal&lt;/a&gt;&lt;/em&gt;. Как оказалось это очень критично для &lt;a href=&quot;http://nhforge.org/&quot;&gt;NHibernate&lt;/a&gt;, но, к счастью, разработчики NHibernate (а точнее &lt;a href=&quot;http://www.hibernate.org/&quot;&gt;Hibernate&lt;/a&gt;) эту проблему заметили и уже решили.&lt;/p&gt;

&lt;p&gt;Но эта фича осталась незамеченной и почти не задокументированной.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Для того, чтобы в NHibernate включить кэширование вызовов &lt;em&gt;IDataReader.GetOrdinal&lt;/em&gt; необходимо в hibernate.cfg выставить опцию &amp;#8220;adonet.wrap_result_sets&amp;#8221; в значение &amp;#8220;true&amp;#8221;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;
&amp;lt;hibernate-configuration xmlns=&quot;urn:nhibernate-configuration-2.2&quot;&amp;gt;
    &amp;lt;!-- other options --&amp;gt;
    &amp;lt;session-factory name=&quot;MySessionFactory&quot;&amp;gt;
        &amp;lt;!-- other session factory options --&amp;gt;
        &amp;lt;property name=&quot;adonet.wrap_result_sets&quot;&amp;gt;true&amp;lt;/property&amp;gt;
    &amp;lt;/session-factory&amp;gt;
&amp;lt;/hibernate-configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C помощью FluentNHibernate это делается так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = Fluently.Configure()
    .ExposeConfiguration(c =&amp;gt; c.SetProperty(NHibernate.Cfg.Environment.WrapResultSets, &quot;true&quot;))
    .Database(db)
    /* other configuration */
    .BuildConfiguration();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Метод &lt;em&gt;ExposeConfiguration&lt;/em&gt; добавляет действия, которые будут вызваны над объектом &lt;em&gt;NHibernate.Cfg.Configuration&lt;/em&gt; при вызове метода &lt;em&gt;BuildConfiguration&lt;/em&gt;. Таким образом код выше будет аналогичен следующему:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = Fluently.Configure()
    .Database(db)
    /* other configuration */
    .BuildConfiguration();

config.SetProperty(NHibernate.Cfg.Environment.WrapResultSets, &quot;true&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Ссылки по теме&lt;/h5&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://nhibernate.jira.com/browse/NH-3207&quot;&gt;https://nhibernate.jira.com/browse/NH-3207&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ramblingabout.wordpress.com/2009/01/07/optimizing-oracle-and-hibernate-performance/&quot;&gt;http://ramblingabout.wordpress.com/2009/01/07/optimizing-oracle-and-hibernate-performance/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a href=&quot;http://martijndashorst.com/blog/2006/11/28/hibernate-31-something-performance-problems-contd/&quot;&gt;http://martijndashorst.com/blog/2006/11/28/hibernate-31-something-performance-problems-contd/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>NHibernate: как хранить иерархические сущности (деревья) в базе</title>
   <link href="http://blog.hazzik.ru/2012/07/05/how-to-deal-with-trees-in-nhibernate/"/>
   <updated>2012-07-05T09:06:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/07/05/how-to-deal-with-trees-in-nhibernate</id>
   <content type="html">&lt;p&gt;Многие из вас, скорее всего, сталкивались с простой на первый взгляд задачей: сохранение иерархических данных в базу и последующая работа с ними. Кажется, что нет ничего проще: создадим в таблице колонку PARENT_ID и будем записывать туда, собственно, идентификатор нашей вышестоящей сущности.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    class Tree {
        int Id;
        Tree Parent;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Но, это только на первый взгляд.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Все хорошо до тех пор, пока вы будете работать на одном уровне иерархии: родитель и его дети. Но самое интересно начинается, когда вам необходимо расширить уровни, к примеру, нужно проверить, что какая-то сущность стоит выше другой сущности на любом из уровней.&lt;/p&gt;

&lt;p&gt;C такой задачей ни одна ORM уже не справится: в лучшем случае вы получите &lt;a href=&quot;http://nhprof.com/Learn/Alerts/SelectNPlusOne&quot;&gt;SELECT N+1&lt;/a&gt;. Для решения этой проблемы вам придется написать кастомный &lt;em&gt;зависящий от конкретной базы&lt;/em&gt; запрос: рекурсивные запрос с WITH в Microsoft Sql Server; запрос с CONNECT BY PRIOR в Oracle; либо специальную хранимую процедуру.&lt;/p&gt;

&lt;p&gt;В статье &amp;#8220;&lt;a href=&quot;http://nhibernate.hibernatingrhinos.com/16/how-to-map-a-tree-in-nhibernate&quot;&gt;How to map a tree in NHibernate&lt;/a&gt;&quot; &lt;a href=&quot;http://lostechies.com/gabrielschenker/author/gabrielschenker/&quot;&gt;Gabriel Schenker&lt;/a&gt; предлагает альтернативный вариант: необходимо добавить таблицу, в которой для каждой сущности мы будем хранить ссылки на всех ее предков и всех ее потомков. Потомки будут отображаться на коллекцию &lt;em&gt;Descendants&lt;/em&gt;, а предки на коллекцию &lt;em&gt;Ancestors&lt;/em&gt;. Обе коллекции many-to-many:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    class Tree {
        int Id;
        Tree Parent;
        IEnumerable&amp;lt;Tree&amp;gt; Children;
        IEnumerable&amp;lt;Tree&amp;gt; Ancestors;
        IEnumerable&amp;lt;Tree&amp;gt; Descendant;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;С такой структурой очень легко обращаться.&lt;/p&gt;

&lt;p&gt;Но, плюсы не бывают без минусов. Из минусов могу отметить то, что вам необходимо следить за состоянием таблицы иерархических связей: это можно делать из кода, либо с помощью триггера\запроса\хранимой процедуры. К счастью, если это делать в коде, то этот код нужно написать лишь раз и использовать его везде, где необходимо, что я собственно и &lt;a href=&quot;https://github.com/hazzik/Grapes&quot;&gt;сделал&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Brandy.Grapes&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hazzik/Grapes&quot;&gt;Brandy.Grapes&lt;/a&gt; - это небольшой (всего 3) набор библиотек, который позволяет легко и непринужденно работать с сохраняемыми иерархическими сущностями в &lt;a href=&quot;http://nhforge.org&quot;&gt;NHibernate&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;Необходимо установить библиотеку через &lt;a href=&quot;http://nuget.org&quot;&gt;nuget&lt;/a&gt; (поддерживается NHibernate By Code и FluentNHibernate):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install-package Brandy.Grapes.NHibernate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;или&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install-pacakge Brandy.Grapes.FluentNhibernate
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Унаследовать вашу сущность от &lt;em&gt;TreeEntry`1&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MySuperTree : TreeEntry&amp;lt;MySuperTree&amp;gt; {
    public virtual int Id { get; set; }

    public virtual string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Наконец, написать маппинг, к примеру, для FluentNHibernate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Brandy.Grapes.FluentNHibernate;
public class MySuperTreeMap : ClassMap {
    public MySuperTreeMap() {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.Name);

        this.MapTree(&quot;MySuperTreeHierarchy&quot;); // вся магия происходит здесь
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Наслаждаться: теперь &lt;em&gt;Brandy.Grapes&lt;/em&gt; будет отслеживать изменения в иерархии и корректно сохранять их в базу.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Как справедливо заметил Денис Боровнев, при изменении иерархии необходимо из базы подгрузить всю иерархию для данного элемента, чтобы правильно обновить связи. Если у вас в проекте иерархические сущности изменяются достаточно часто, то можно отключить изменение иерархии из кода и обновлять связи через базу. Существует несколько способов:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;Вызывать хранимую процедуру (по триггеру, или из кода), для обновления иерархических связей:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- пример для Microsoft Sql Server
CREATE PROCEDURE [dbo].[FillHierarchy] (@table_name nvarchar(MAX), @hierarchy_name nvarchar(MAX))
AS
BEGIN
    DECLARE @sql nvarchar(MAX), @id_column_name nvarchar(MAX)
    SET @id_column_name = &#39;[&#39; + @table_name + &#39;_ID]&#39;
    SET @table_name = &#39;[&#39; + @table_name + &#39;]&#39;
    SET @hierarchy_name = &#39;[&#39; + @hierarchy_name + &#39;]&#39;

    SET @sql = &#39;&#39;
    SET @sql = @sql + &#39;WITH Hierachy(CHILD_ID, PARENT_ID) AS ( &#39;
    SET @sql = @sql + &#39;SELECT &#39; + @id_column_name + &#39;, [PARENT_ID] FROM &#39; + @table_name + &#39; e &#39;
    SET @sql = @sql + &#39;UNION ALL &#39;
    SET @sql = @sql + &#39;SELECT e.&#39; + @id_column_name + &#39;, e.[PARENT_ID] FROM &#39; + @table_name + &#39; e &#39;
    SET @sql = @sql + &#39;INNER JOIN Hierachy eh ON e.&#39; + @id_column_name + &#39; = eh.[PARENT_ID]) &#39;
    SET @sql = @sql + &#39;INSERT INTO &#39; + @hierarchy_name + &#39; ([CHILD_ID], [PARENT_ID]) ( &#39;
    SET @sql = @sql + &#39;SELECT [CHILD_ID], [PARENT_ID] FROM Hierachy WHERE [PARENT_ID] IS NOT NULL &#39;
    SET @sql = @sql + &#39;) &#39;

    EXECUTE (@sql)
END
GO
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Для каждой иерархии создать &lt;em&gt;View&lt;/em&gt; (тот же запрос, что и в хранимой процедуре) и отобразить связи &lt;em&gt;Ancestors&lt;/em&gt; и &lt;em&gt;Descendants&lt;/em&gt; на эту &lt;em&gt;View&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- Пример для Microsoft Sql Server
CREATE VIEW [MySuperTreeHierarchy]
AS
    WITH Hierachy (CHILD_ID, PARENT_ID) 
    AS 
    (
        SELECT [MySuperTree_ID], [PARENT_ID] FROM [MySuperTree] AS e
        UNION ALL
        SELECT e.[MySuperTree_ID], e.[PARENT_ID] FROM [MySuperTree] AS e 
            INNER JOIN Hierachy AS eh ON e.[MySuperTree_ID] = eh.[PARENT_ID]
    )

    SELECT [CHILD_ID], [PARENT_ID] FROM Hierachy WHERE [PARENT_ID] IS NOT NULL
GO
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Оба этих подхода обладают большей гибкостью и надежностью, чем иерархические запросы на чистом SQL из кода.&lt;/p&gt;

&lt;p&gt;PS: интерфейс абстрактного класса &lt;em&gt;TreeEntry`1&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public abstract class TreeEntry&amp;lt;T&amp;gt; where T : TreeEntry {
        public virtual T Parent { get; set; }

        public virtual IEnumerable&amp;lt;T&amp;gt; Children { get; }

        public virtual IEnumerable&amp;lt;T&amp;gt; Ancestors { get; }

        public virtual IEnumerable&amp;lt;T&amp;gt; Descendants { get; }

        public virtual void AddChild(T child);

        public virtual void RemoveChild(T child);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PPS: для EF такое сделать также возможно, но т.к. &lt;em&gt;EF&lt;/em&gt; не поддерживает скрытие коллекций за интерфейсом IEnumerable`1, я не стал выкладывать реализацию для EF в открытый доступ.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ASP.NET MVC - как построить по-настоящему гибкое веб-приложение (видео и слайды с .NETconf)</title>
   <link href="http://blog.hazzik.ru/2012/06/08/asp-net-mvc-high-extensible-application/"/>
   <updated>2012-06-08T20:11:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/06/08/asp-net-mvc-high-extensible-application</id>
   <content type="html">&lt;p&gt;Внезапно осознал, что у меня в блоге нет материалов с моего доклада на &lt;a href=&quot;http://www.dotnetconf.ru/&quot;&gt;.NETconf&lt;/a&gt;. Срочно исправляю эту оплошность.&lt;/p&gt;

&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;

&lt;div style=&quot;float:left; width:500px; margin:5px;&quot;&gt;
&lt;iframe src=&quot;http://player.vimeo.com/video/22080198?title=0&amp;amp;byline=0&amp;amp;portrait=0&amp;amp;color=59a5d1&quot; width=&quot;500&quot; height=&quot;350&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div style=&quot;float:left; width:420px; margin:5px;&quot; id=&quot;__ss_7557204&quot;&gt;
 &lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/34835075&quot; width=&quot;476&quot; height=&quot;400&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br style=&quot;clear:both&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;Ссылки&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;Страница доклада на .NETConf: &lt;a href=&quot;http://www.dotnetconf.ru/Materialy/Asp_net_mvc_kak_postroit_gibkoe_web_prilozenie&quot;&gt;http://www.dotnetconf.ru/Materialy/Asp_net_mvc_kak_postroit_gibkoe_web_prilozenie&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Слайды: &lt;a href=&quot;https://dl.dropbox.com/u/11463325/AgileMVCApplication.pptx&quot;&gt;https://dl.dropbox.com/u/11463325/AgileMVCApplication.pptx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>EF Bootstrapping</title>
   <link href="http://blog.hazzik.ru/2012/05/03/ef-bootstrapping/"/>
   <updated>2012-05-03T20:46:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/05/03/ef-bootstrapping</id>
   <content type="html">&lt;p&gt;Привет всем любителям EF Code First.&lt;/p&gt;

&lt;p&gt;Вчера на коленке написал конфигуратор для EF CF во fluent- стиле. Использование выглядит так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var factory = Configure.WithContext&amp;lt;MyDbContext&amp;gt;(&quot;connectionstring&quot;) // использовать контекст типа MyDbContext и строку подключения connectionstring
     .AddMappingsFromAssemblyOf&amp;lt;XXX&amp;gt;()  // здесь есть перегрузки, принимающие Type и Assembly. В подключенной сборке находит все реализации EntityTypeConfiguration`1 и ComplexTypeConfiguration`1
     .LazyLoadingEnabled(true) // пример конфигурации контекста
     .BuildDbContextFactory(); // возвращается реализация IDbContextFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;p&gt;Назначение - использовать generic context и автонахождение маппингов.&lt;/p&gt;

&lt;h1&gt;Список методов&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;public static class Configure
{
    public static DbContextFactoryConfiguration WithContext&amp;lt;TContext&amp;gt;(string connectionString) where TContext : DbContext;

    public static DbContextFactoryConfiguration WithContext(string connectionString);

    public static DbContextFactoryConfiguration WithContext(Type contextType, string connectionString);
}

public class DbContextFactoryConfiguration
{
    public DbContextFactoryConfiguration AddMappingsFromAssembly(Assembly assembly);

    public DbContextFactoryConfiguration AddMappingsFromAssemblyOf(Type type);

    public DbContextFactoryConfiguration AddMappingsFromAssemblyOf&amp;lt;T&amp;gt;();

    public DbContextFactoryConfiguration AutoDetectChangesEnabled(bool value);

    public DbContextFactoryConfiguration LazyLoadingEnabled(bool value);

    public DbContextFactoryConfiguration ProxyCreationEnabled(bool value);

    public DbContextFactoryConfiguration ValidateOnSaveEnabled(bool value);

    public IDbContextFactory BuildDbContextFactory();
}

public interface IDbContextFactory : System.Data.Entity.IDbContextFactory&amp;lt;DbContext&amp;gt;
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Вопросы&lt;/h1&gt;

&lt;ul&gt;&lt;li&gt;это будет востребованно? &lt;/li&gt;
&lt;li&gt;стоит развивать дальше?&lt;/li&gt;
&lt;li&gt;какие конфигурационные параметры я пропустил?&lt;/li&gt;
&lt;li&gt;&lt;p&gt;что еще нужно добавить?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;как вы конфигурируете контекст в EF?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;Обсуждение&lt;/h1&gt;

&lt;p&gt;В гуглгруппе DotNetConf: &lt;a href=&quot;https://groups.google.com/d/topic/dotnetconf/gx4PqT6xhtM/discussion&quot;&gt;https://groups.google.com/d/topic/dotnetconf/gx4PqT6xhtM/discussion&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;UPD&lt;/h1&gt;

&lt;p&gt;Разместил код на GitHub: &lt;a href=&quot;https://github.com/hazzik/EFBootstrapper&quot;&gt;https://github.com/hazzik/EFBootstrapper&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NHibernate 3.3</title>
   <link href="http://blog.hazzik.ru/2012/05/01/nhibernate-3-3/"/>
   <updated>2012-05-01T00:31:17+12:00</updated>
   <id>http://blog.hazzik.ru/2012/05/01/nhibernate-3-3</id>
   <content type="html">&lt;p&gt;Пост для тех, кто пропустил релиз. В позапрошлую субботу (21 апреля 2012) вышел долгожданный (по-крайней мере для меня) релиз &lt;a href=&quot;http://nhforge.org/&quot;&gt;NHibernate&lt;/a&gt; 3.3.0.GA.&lt;/p&gt;

&lt;p&gt;Скачать можно с &lt;a href=&quot;http://sourceforge.net/projects/nhibernate/?source=directory&quot;&gt;SF&lt;/a&gt; или из &lt;a href=&quot;http://nuget.org/packages/nhibernate&quot;&gt;NuGet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Список изменений на английском, можно почитать &lt;a href=&quot;https://github.com/nhibernate/nhibernate-core/blob/3.3.0GA/releasenotes.txt&quot;&gt;тут&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS: я теперь в NH-core team ;)&lt;/p&gt;

&lt;p&gt;PPS: не забывайте обо всех багах сообщать в &lt;a href=&quot;https://nhibernate.jira.com/browse/NH&quot;&gt;баг-трекер&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>nvarchar(?)</title>
   <link href="http://blog.hazzik.ru/2012/04/11/nvarchar/"/>
   <updated>2012-04-11T22:07:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/04/11/nvarchar</id>
   <content type="html">&lt;p&gt;Всегда, когда работаю с базой данных и вижу вот такое:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE [dbo].[Users] (
    [UserId] int IDENTITY NOT NULL,
    [EMail] nvarchar(215) NOT NULL,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;задаю себе одни и те же вопросы:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;чем руководствовался автор, когда выбирал максимальную длину строки?&lt;/li&gt;
&lt;li&gt;Почему именно 215, а не 214 или 216?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;У меня нет ответа на эти вопросы. Может быть вы знаете?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MvcExtensions - как подключить jquery-ui date picker в ASP.NET MVC. Unobtrusive way.</title>
   <link href="http://blog.hazzik.ru/2012/04/02/mvcextensions-jqueryui-datepicker-unobtrusive/"/>
   <updated>2012-04-02T22:00:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/04/02/mvcextensions-jqueryui-datepicker-unobtrusive</id>
   <content type="html">&lt;p&gt;В &lt;a href=&quot;http://metrika.yandex.ru&quot;&gt;Яндекс.Метрика&lt;/a&gt; подсмотрел, что по такому поисковому запросу приходят в мой блог и решил написать статью об этом. Задача довольно простая - позволить пользователю выбирать дату из красивого календаря, такого как &lt;a href=&quot;http://jqueryui.com/demos/datepicker/&quot;&gt;jQuery UI Datepicker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Решение &amp;#8220;в лоб&amp;#8221;.&lt;/h3&gt;

&lt;p&gt;Как известно, &lt;a href=&quot;http://asp.net/mvc&quot;&gt;ASP.NET MVC&lt;/a&gt; поддерживает шаблоны для редакторов полей. Первый вариант - использовать такой шаблон &amp;#8220;в лоб&amp;#8221;. &lt;!-- more --&gt; Создадим файл с названием &amp;#8220;DateTime.cshtml&amp;#8221; и положим его в &amp;#8220;/Views/Shared/EditorTemplates/&amp;#8221;. Содержание файла будет таким:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model DateTime?
@Html.TextBox(&quot;&quot;) @* &quot;&quot; - мы говорим, что для названия поля будет использоваться название модели *@
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    (function($) {
        $(function() {
            var settings = {
                //здесь стандартные настройки для datepicker
            };
            $(&#39;#@Html.IdForModel()&#39;).datepicker(settings);
        });            
    })(jQuery);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь, каждый раз, когда вы будете писать &lt;code&gt;@Html.EditorFor(x =&amp;gt; x.FieldOfDateTimeType)&lt;/code&gt; будет использоваться данный шаблон.&lt;/p&gt;

&lt;p&gt;У этого решения есть недостатки:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Решение не гибкое - не позволяет использовать разные настройки для разных редакторов. Для того, чтобы использовать другие настройки календаря необходимо создать &lt;em&gt;отдельный&lt;/em&gt; шаблон.&lt;/li&gt;
&lt;li&gt;Каждый раз, при отрисовке календарика в разметку будет добавляться дополнительный &lt;script&gt;, что будет сказываться на производительности.&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Делаем жизнь проще.&lt;/h3&gt;

&lt;p&gt;Очевидно, что дублирующийся в конечном HTML скрипт нужно куда-то вынести. Вынесем его в базовый слой, или в отдельный файл. Для этого, нам необходимо модифицировать наш sizzle-селектор для того, чтобы он находил &lt;em&gt;все&lt;/em&gt; календарики. Для этого пометим наш календарик с помощью аттрибута &lt;code&gt;role=&quot;datepicker&quot;&lt;/code&gt; и для поддержки html5 присвоим ему тип - &amp;#8220;date&amp;#8221;:&lt;/p&gt;

&lt;p&gt;DateTime.cshtml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@model DateTime?
@Html.TextBox(&quot;&quot;, null, new { role = &quot;datepicker&quot;, type = &quot;date&quot; }) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_Layout.cshtml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    (function($) {
        $(function() {
            var settings = {
                //здесь стандартные настройки для datepicker
            };
            $(&#39;input[role=datepicker], input[type=date]&#39;).datepicker(settings);
        });            
    })(jQuery);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Данное решение более элегантно, чем решение в лоб, но при этом остается почти таким же не гибким.&lt;/p&gt;

&lt;h3&gt;Решение с использованием &lt;a href=&quot;http://mvcextensions.codeplex.com/&quot;&gt;MvcExtensions&lt;/a&gt; + unobtrusive javascript.&lt;/h3&gt;

&lt;p&gt;Предыдущее решение уже unobtrusive, но пока не позволяет передавать дополнительные параметры в календарик. Для этого к нам на помощь придут наши друзья &lt;a href=&quot;http://github.com/MvcExtensions/Core/blob/master/src/MvcExtensions/ModelMetadata/IModelMetadataAdditionalSetting.cs&quot;&gt;&lt;code&gt;IModelMetadataAdditionalSetting&lt;/code&gt;&lt;/a&gt;s. Для их использования мы создадим метод расширения &lt;code&gt;AsDatePicker&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class ModelMetadataItemBuilderDatePickerExtensions {
    public static ModelMetadataItemBuilder&amp;lt;T&amp;gt; AsDatepicker&amp;lt;T&amp;gt;(this ModelMetadataItemBuilder&amp;lt;T&amp;gt; self, 
        DateTime? minDate = null, DateTime? maxDate = null) {
        self.Template(&quot;DateTime&quot;);

        var setting = self.Item.GetAdditionalSettingOrCreateNew&amp;lt;DatePickerSettings&amp;gt;();
        setting.MinDate = minDate;
        setting.MaxDate = maxDate;

        return self;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь всё просто: выставляется шаблон и создаются настройки для календарика. В шаблоне мы будет отрисовывать это следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@{var settings = ViewData.ModelMetadata.GetAdditionalSettingOrCreateNew&amp;lt;DatePickerSettings&amp;gt;(); }
@Html.TextBoxFor(_ =&amp;gt; _, settings.ToHtmlAttributes() /*html attributes*/)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь настройки сериализуются в data-* аттрибуты у элемента &lt;code&gt;&amp;lt;input /&amp;gt;&lt;/code&gt;. При этом, будет соблюдена конвенция, что знак подчеркивания будет преобразован в дефис.&lt;/p&gt;

&lt;p&gt;Класс &lt;code&gt;DatePickerSettings&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DatePickerSettings : IModelMetadataAdditionalSetting {
    public DateTime? MinDate { get; set; }
    public DateTime? MaxDate { get; set; }

    public object ToHtmlAttributes() {
        return new
                   {
                       role = &quot;datepicker&quot;,
                       type = &quot;date&quot;,
                       data_min_date = MinDate,
                       data_max_date = MaxDate,
                   };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://jqueryui.com&quot;&gt;jQuery-UI&lt;/a&gt; для настроек использует camelCase нотацию, а, jQuery, к счастью, автоматически преобразуте дефисы в data-* аттрибутах в такую нотацию. Таким образом нам нужно просто для каждого &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; взять его data-* аттрибуты и просто передать в качестве настроек в datapicker. Это будет сделано скриптом в &lt;code&gt;_Layout.cshtml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    (function($) {
        $(function() {
            $(&#39;[role=datepicker]&#39;, input[type=date]&#39;).each(function () {
                var self = $(this);
                self.datepicker(self.data());
            });
        });            
    })(jQuery);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В метаданных это будет использоваться так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyModelMetadata: ModelMetadataConfiguration&amp;lt;MyModel&amp;gt; {
    public MyModelMetadata() {
        Configure(m =&amp;gt; m.FieldOfDateTimeType)
            .AsDatepicker(minDate: DateTime.Today, maxDate: DateTime.Today.AddDays(10));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Вместо заключения&lt;/h3&gt;

&lt;p&gt;Данное решение обладает абсолютной гибкостью и позволяет управлять любыми свойствами для каждого из ваших календарей (и не только календарей) через метаданные формы.&lt;/p&gt;

&lt;hr&gt;&lt;p&gt;По материалам &lt;a href=&quot;http://www.dotnetconf.ru/Materialy/Primenenie_metadannih_ViewModel_dlya_konfigurirovania_kompleksnih_javascript_controlov&quot;&gt;доклада &amp;#8220;Metadata + JavaScript = ♥&amp;#8221;&lt;/a&gt; Рахматиллаева Тимура на dotnetconf.&lt;/p&gt;

&lt;h3&gt;UPDATE: Добавил примеры к статье.&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;Примеры доступны здесь: &lt;a href=&quot;http://hazzik-samples.apphb.com/DatePicker&quot;&gt;http://hazzik-samples.apphb.com/DatePicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Исходиники примеров здесь: &lt;a href=&quot;https://github.com/hazzik/Samples-From-My-Blog&quot;&gt;https://github.com/hazzik/Samples-From-My-Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>MvcExtensions - решение проблемы DropDown Lists</title>
   <link href="http://blog.hazzik.ru/2012/04/02/mvcextensions-solving-drop-down-lists-problem/"/>
   <updated>2012-04-02T07:30:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/04/02/mvcextensions-solving-drop-down-lists-problem</id>
   <content type="html">&lt;p&gt;С самого выхода еще первой версии &lt;a href=&quot;http://www.asp.net/mvc&quot;&gt;ASP.NET MVC&lt;/a&gt; три года назад я столкнулся с проблемой выпадающих списков. Наверное &lt;a href=&quot;http://habrahabr.ru/post/106370/&quot;&gt;каждый&lt;/a&gt; &lt;a href=&quot;http://pashapash.com/2010/12/dropdown-v-asp-net-mvc-chast-1/&quot;&gt;из вас&lt;/a&gt; &lt;a href=&quot;http://www.google.ru/webhp#q=asp.net+mvc+dropdownlist&quot;&gt;задавал себе вопрос&lt;/a&gt;: &amp;#8220;Как корректно передавать данные для отображения в выпадающие списки?&amp;#8221; Вот и меня до недавнего времени этот вопрос волновал и очень существенно. Я буквально не мог спать;)&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Допустим у нас есть форма, для создания фильма. И нам нужно из DropDown выбрать жанр фильма. Откровенно &amp;#8220;профанские&amp;#8221; решения, такие как получение возможных значений прямо на View я рассматривать не буду.&lt;/p&gt;

&lt;h2&gt;Решение &amp;#8220;в лоб&amp;#8221;&lt;/h2&gt;

&lt;p&gt;Программисты, сталкивающиеся с этой проблемой очень часто идут решать ее в лоб: в модели создается дополнительное свойство Genres типа SelectList и оно заполняется в методе контроллера.&lt;/p&gt;

&lt;p&gt;Модель:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Genres&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Контроллер:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MoviesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Genres&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllGenresFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetMovieFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Genres&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllGenresFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditMovie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Но у этого решения для меня есть огромные недостатки:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Лишнее поле в модели&lt;/li&gt;
&lt;li&gt; Необходимо создавать модель при отображении формы создания&lt;/li&gt;
&lt;li&gt; Дублирование кода заполнения возможных значений. &lt;small&gt;Эта проблема становится особенно актуальное, если у вас в системе можно во многих местах выбирать значения из одного и того же справочника.&lt;/small&gt;&lt;/li&gt;
&lt;li&gt; Нет возможности использовать &lt;code&gt;Html.EditorForModel()&lt;/code&gt; - ASP.NET отображает общую разметку для всех полей модели, при этом при отображении какого-либо поля модели нет доступа к другим полям.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Решение с использованием ViewBag / ViewData&lt;/h2&gt;

&lt;p&gt;Это решение по большей части аналогично предыдущему решению, за тем лишь исключением, что возможные значение передаются через ViewBag:&lt;/p&gt;

&lt;p&gt;Модель:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UIHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Genres&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Контроллер:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MoviesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Genres&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllGenresFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetMovieFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Genres&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllGenresFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditMovie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Плюсы, по сравнению с предыдущим решением.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Нет лишних полей в модели&lt;/li&gt;
&lt;li&gt; Нет необходимости создавать модель при отображении формы создания&lt;/li&gt;
&lt;li&gt; Можно использовать &lt;code&gt;Html.EditorForModel()&lt;/code&gt; в связке с шаблоном (EditorTemplate). При этом для каждого справочника необходим свой шаблон&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Минусы&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Используется dynamic или magic-strings*, что не всегда положительно сказывается на возможности рефакторинга&lt;/li&gt;
&lt;li&gt; Дублирование кода заполнения возможных значений&lt;/li&gt;
&lt;li&gt; Необходимо иметь по шаблону на каждый тип справочника&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Недостатки&lt;/p&gt;

&lt;h3&gt;Улучшенное решение с использованием ViewBag / ViewData&lt;/h3&gt;

&lt;p&gt;Для устранения дублировани кода получения возможных значений вынесем этот код в отдельный ActionFilter.&lt;/p&gt;

&lt;p&gt;Модель:&lt;/p&gt;

&lt;p&gt;та же, что в предыдущем примере&lt;/p&gt;

&lt;p&gt;ActionFilter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PopulateGenresAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionFilterAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Genres&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAllGenresFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Контроллер:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MoviesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PopulateGenres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PopulateGenres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetMovieFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditMovie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Плюсы, по сравнению с предыдущим решением.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Устранено дублирование кода заполнения возможных значений&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Минусы&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Используется dynamic или magic-strings*, что не всегда положительно сказывается на возможности рефакторинга&lt;/li&gt;
&lt;li&gt; Необходимо иметь по шаблону на каждый тип справочника&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Улучшенное решение с использованием ViewBag / ViewData + &lt;a href=&quot;http://mvcextensions.codeplex.com&quot;&gt;MvcExtnsions&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;В MvcExensions есть замечательные &lt;a href=&quot;http://github.com/MvcExtensions/Core/blob/master/src/MvcExtensions/ModelMetadata/HtmlSelectModelMetadataItemBuilderExtensions.cs&quot;&gt;методы для работы с drop-down list&lt;/a&gt;: AsDropDownList / AsListBox (первый для выпадающего списка, второй для множественного выбора). Это методы-расширения для конструктора метаданных. Данные методы устанавливают шаблон и позволяют передать в шаблон название поля ViewBag, которое хранит данные с возможными значениями. Таким образом решается проблема с необходимостю иметь по шаблону на каждый справочник.&lt;/p&gt;

&lt;p&gt;Модель:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Метаданные:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MovieMetadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMetadataConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MovieMetadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsDropDownList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Genres&quot;&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*шаблон*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Контроллер:&lt;/p&gt;

&lt;p&gt;как в предыдущем примере.&lt;/p&gt;

&lt;p&gt;Плюсы, по сравнению с предыдущим решением:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Используется два универсальных шаблона (DropDownList / ListBox) для всех списков (есть возможность указать свой шаблон, если это необходимо)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Минусы:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Используется dynamic или magic-strings*, что не всегда положительно сказывается на возможности рефакторинга.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Решение с использованием ChildAction&lt;/h3&gt;

&lt;p&gt;Если попытаться использовать child action &amp;#8220;в лоб&amp;#8221;, то это решение просто-напросто не будет работать: не будет работать клиенская валидация, не будут работать сценарии в случае сложных вложенных форм и т.д. В &lt;a href=&quot;http://pashapash.com/2010/12/dropdown-v-asp-net-mvc-chast-1/&quot;&gt;статье&lt;/a&gt; (&lt;a href=&quot;http://pashapash.com/2011/01/dropdown-v-asp-net-mvc-chast-2/&quot;&gt;часть 2&lt;/a&gt;) неизвестного автора (быстрый поиск выдал только &lt;a href=&quot;http://habrahabr.ru/users/PashaPash/&quot;&gt;профиль&lt;/a&gt; на хабре) решены эти проблемы, и по-этому я буду рассматривать &lt;em&gt;окончательное решение автора&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Модель&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UIHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Genres&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Контроллеры:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MoviesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetMovieFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditMovie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenresController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectedGenreId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControllerContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParentActionViewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genres&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetGenresFormDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SelectList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DisplayName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectedGenreId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMetadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ControllerContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParentActionViewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DropDown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Плюсы, по сравнению, с решениями с ViewBag / ViewData&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Не используется dynamic или magic-strings&lt;/li&gt;
&lt;li&gt; Устранено дублирование кода заполнения возможных значений&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Минусы&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Дублирование обслуживающего кода&lt;/li&gt;
&lt;li&gt; Необходимо иметь по шаблону на каждый тип справочника&lt;/li&gt;
&lt;li&gt; Не поддерживается сценарий Post-Redirect-Get&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Решение с использованием ChildAction + MvcExtensions&lt;/h3&gt;

&lt;p&gt;Я решил, усовершенствовать последнее решение и применить опыт использования ActionFilter, и теперь, с версии &lt;a href=&quot;http://nuget.org/packages/MvcExtensions&quot;&gt;2.5.0-rc8000 в MvcExtensions&lt;/a&gt; поддерживаются выпадающие списки &amp;#8220;из коробки&amp;#8221;. Были добавлены методы расширения, позволяющие указывать, что для отображения данного поля модели необходимо вызвать ChildAction. Также был добавлен &lt;code&gt;SelectListActionAttribute&lt;/code&gt;, который занимается обслуживанием метода, предоставлюящего возможнные значения для выпадающего списка. Поддерживается Post-Redirect-Get&lt;/p&gt;

&lt;p&gt;Модель:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Метаданные:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MovieMetadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMetadataConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MovieMetadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenreId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RenderAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Genres&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Контроллеры:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MoviesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Movie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetMovieFromDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditMovie&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something with movie.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenresController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChildActionOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectListAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetGenresFormDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DropDown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Плюсы, по сравнению с предыдущими решениями&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Устранено дублирование обслужвающего кода&lt;/li&gt;
&lt;li&gt; Используется единый шаблон&lt;/li&gt;
&lt;li&gt; MultiSelect &amp;#8220;из коробки&amp;#8221;&lt;/li&gt;
&lt;li&gt; Поддерживается сценарий Post-Redirect-Get&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Вместо заключения.&lt;/h1&gt;

&lt;p&gt;Для меня, как одного из разработчиков MvcExtensions варианты с использованием этой библиотеки предпочтительнее.&lt;/p&gt;

&lt;p&gt;Пример кода для варианта с ViewBag / ViewData + MvcExtensions здесь: &lt;a href=&quot;http://github.com/MvcExtensions/Core/tree/master/samples&quot;&gt;http://github.com/MvcExtensions/Core/tree/master/samples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Пример кода для варианта с ChildAction + MvcExtensions здесь: &lt;a href=&quot;http://github.com/hazzik/DropDowns&quot;&gt;http://github.com/hazzik/DropDowns&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;*magic-strings легко побеждаются, использованием констант, и по-этому для меня в данном контексте предпочтительней, чем dynamic&lt;/p&gt;

&lt;p&gt;PS: Возможности MvcExtensions для расширения старого доброго ASP.NET MVC просто безграничны.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Общая или личная база данных при разработке?</title>
   <link href="http://blog.hazzik.ru/2012/03/18/share-or-individual-developer-database/"/>
   <updated>2012-03-18T22:56:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/03/18/share-or-individual-developer-database</id>
   <content type="html">&lt;p&gt;В этой статье я хочу рассказать о практиках работы разработчиков с базами данных в момент разработки продукта. Все из этих практик были опробованны мной &lt;em&gt;лично&lt;/em&gt; и текст здесь основан на моем &lt;em&gt;личном&lt;/em&gt; опыте.&lt;/p&gt;

&lt;p&gt;Можно использовать единую для всех и индивидуальную базу данных для каждого разработчика. Оба подхода имеют как достоинства, так и недостатки.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h4&gt;Общая база данных.&lt;/h4&gt;

&lt;p&gt;Обычно разработчик, изменивший схему БД, кричит на весь офис: &amp;#8220;обновитесь, я изменил базу!&amp;#8221;&lt;/p&gt;

&lt;p&gt;При этом подходе изменение в базе &lt;strong&gt;сразу же&lt;/strong&gt; отображаются у всех разработчиков, это является как достоинством, так и недостатком.&lt;/p&gt;

&lt;p&gt;Если ваша ORM или система для управления схемой базы данных использует бинарный формат для хранения своего проекта, то вам необходимо соблюдать осторожность: необходимо предупредить всех, что вы собираетесь обновить схему данных, ждать своей очереди на обновление схемы, что на начальном этапе разработки, когда схема данных еще не устоялась может существенно замедлить разработку.&lt;/p&gt;

&lt;p&gt;Также очень часто разработка может остановиться, если вы уже &lt;em&gt;значительно&lt;/em&gt; изменили базу данных, но еще не можете закоммитить изменения, т.к. код который работает с ней еще не написан.&lt;/p&gt;

&lt;p&gt;У всех пользователей будет использоваться единая строка подключения к базе, и, в связи с этим, продуктовая боевая база будет называться, &lt;em&gt;скорее всего&lt;/em&gt;, так же.&lt;/p&gt;

&lt;p&gt;Всем разработчикам нет необходимости думать о том, как обновлять базу данных. С одной стороны это достоинство, но с другой очень часто и недостаток - в команде нет общего видения, какие шаги необходимо предпринять для обновления боевой базы и очень часто боевая и база разработчиков находятся в &lt;em&gt;разном состоянии&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;В моей практике очень часто случались ситуации &amp;#8220;ой забыл&amp;#8221;:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&quot;поигрался&quot; с базой данных и не откатил свои изменения;&lt;/li&gt;
&lt;li&gt;забыл закоммитить скрипт обновелния в репозиторий; &lt;/li&gt;
&lt;li&gt;закоммитил не тот, который выполнял на самом деле; &lt;/li&gt;
&lt;li&gt;из-за гонок скрипт просто не выполняется на живой базе.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;На одном из предыдущих мест работы для борьбы с такой забывчивостью и несоответсвием баз применялся подход ежедневного реплицирования боевой базы данных на базу данных разработчиков. Т.е. утром человек приходил и выполнял все свои скрипты. Этот подход работает, но очень утомителен.&lt;/p&gt;

&lt;h4&gt;Применимость&lt;/h4&gt;

&lt;p&gt;Данный подход хорошо подходит для использования вместе с централизованными хранилищами исходного кода, такими как &lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;SVN&lt;/a&gt; или &lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/ff637362&quot;&gt;TFS&lt;/a&gt;, если все разработчики работают в одной ветке.&lt;/p&gt;

&lt;p&gt;Если все находятся в одном офисе в приделах видимости и слышимости остальных членов команды. Либо разработчики разрабатывают разные модули системы, которые общаются с разными частями базы и никогда не пересекаются (что очень маловероятно). Либо если разработчик на проекте один.&lt;/p&gt;

&lt;p&gt;Также такое решение применяется, если база данных очень требовательна к ресурсам или сложна в администрировании (например &lt;a href=&quot;http://www.oracle.com/us/products/database/index.html&quot;&gt;Oracle&lt;/a&gt;&lt;em&gt;), либо взимается дополнительная плата за каждый копию (&lt;a href=&quot;http://www.microsoft.com/sqlserver&quot;&gt;MS SQL Server&lt;/a&gt;&lt;/em&gt;*).&lt;/p&gt;

&lt;p&gt;*конечно существует Oracle XE, но в силу своих ограничений его поведение и возможности &lt;em&gt;значительно&lt;/em&gt; отличаются от старшего брата.&lt;/p&gt;

&lt;p&gt;**для MS SQL Server в версии Express Edition в основном отличия только на размер базы и количество процессорных ядер, а ядро системы такое же как и у старшего брата.&lt;/p&gt;

&lt;h4&gt;Индивидуальная база данных для каждого разработчика.&lt;/h4&gt;

&lt;p&gt;При этом подходе изменения в базе появляются у разработчика только тогда, когда он забирает изменения из вышестоящего репозитория. Обновление базы возможно как ручное, так и автоматическое.&lt;/p&gt;

&lt;p&gt;Сначала, когда мы обдумывали, переход на индивидуальную базу для каждого, тот факт, что каждому необходимо самому заботится о своей базе, казался нам большой проблемой. Но после некоторого времени использования, мы осознали, что проблема была преувеличена.&lt;/p&gt;

&lt;p&gt;Данный подход позволяет спокойно менять схему базы, не опасаясь что у кого-то возникнут проблемы в процессе разработке из-за этих изменений.&lt;/p&gt;

&lt;p&gt;Данный подход способствует распространению знаний между членами команды о том, как необходимо обновлять базу - в итоге, каждый разработчик мог самостоятельно развернуть проект на боевом сервере.&lt;/p&gt;

&lt;p&gt;Данный подход уменьшает количество интеграционных ошибок за счет частого интегрирования изменений.&lt;/p&gt;

&lt;p&gt;При использовании данного подхода необходимо следить за версией базы данных - разработчик должен понимать какие скрипты уже выполнены, а какие нет.&lt;/p&gt;

&lt;p&gt;Так же необходимо &lt;em&gt;максимально автоматизировать&lt;/em&gt; процесс обновления базы, чтобы у разработчика это не отнимало драгоценное время. В конечном итоге такая автоматизация проекту пойдет только на пользу: обновление боевой версии продукта будет также автоматизированно.&lt;/p&gt;

&lt;h5&gt;Применимость&lt;/h5&gt;

&lt;p&gt;Данный подход идеален для варианта, работы с использованием децентрализованных систем контроля версия (&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;, &lt;a href=&quot;http://mercurial.selenic.com/&quot;&gt;Mercurial&lt;/a&gt;, &lt;a href=&quot;http://bazaar.canonical.com&quot;&gt;Bazaar&lt;/a&gt;). Либо для централизованных систем контроля версий, при активном использовании веток. Также идеально подходит для распределенных команд.&lt;/p&gt;

&lt;h4&gt;Заключение&lt;/h4&gt;

&lt;p&gt;В моем случае подход эволюционировал так:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Общая база данных (MS SQL), &lt;a href=&quot;http://jedivcs.sourceforge.net/&quot;&gt;Jedi VCS&lt;/a&gt;, модульная разработка, индивидуальные миграционные скрипты, написанные вручную (MySuperModule.sql), каждый разработчик свой модуль заливает на боевой сервер сам.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Общая база данных (Oracle), SVN, генерация модели данных по схеме БД (&lt;a href=&quot;http://www.llblgen.com/&quot;&gt;LLBLGen Pro&lt;/a&gt;), общий миграционный скрипт на версию (v1.0.1.sql, v1.0.2.sql).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Общая база данных (Оracle), mercurial, генерация схемы БД по модели (&lt;a href=&quot;http://nhforge.org/&quot;&gt;NHibernate&lt;/a&gt;), общий миграционный скрипт на версию.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Индивидуальная база данных (MS SQL Server), mercurial, генерация схемы БД по модели (NHibernate), общий миграционный скрипт на версию.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Индивидуальная база данных (MS SQL Server), mercurial/git, генерация схемы БД и вставка начальных значений через механизм миграций (&lt;a href=&quot;https://github.com/schambers/fluentmigrator&quot;&gt;FluentMigrator&lt;/a&gt;). Обновление через запуск файла &lt;code&gt;migrate.bat&lt;/code&gt;, что в принципе может вызываться автоматически через post update hook.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Я рекомендую всем пользоваться только подходом c индивидуальной базой данных для разработчика, т.к. для меня его плюсы значительно существенней, чем недостатки.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ORM vs. Хранимые процедуры</title>
   <link href="http://blog.hazzik.ru/2012/03/18/orm-vs-stored-procedures/"/>
   <updated>2012-03-18T06:26:00+12:00</updated>
   <id>http://blog.hazzik.ru/2012/03/18/orm-vs-stored-procedures</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://richardtaylor.me/wp-content/uploads/2011/01/jpg_vs_png-280x3001.png&quot; alt=&quot;png vs jpeg&quot; style=&quot;float:right&quot;/&gt;Мой &lt;a href=&quot;http://www.byndyu.ru&quot;&gt;коллега&lt;/a&gt;, позавчера в очередной раз у себя в блоге &lt;a href=&quot;http://blog.byndyu.ru/2012/03/blog-post.html&quot;&gt;поднял этот больной вопрос&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Для себя я уже давно определился с тем, какой подход использовать, и в этом посте я хочу рассказать вам почему я выбрал именно этот подход.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Stored_procedure&quot;&gt;Хранимые процедуры&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Защитники хранимых процедур приводят в пример два плюса их использования:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Хранимые процедуры компилируются и за счет этого исполняются быстрее, чем обычные SQL скрипты (как написанные вручную, так и сгенерированные ORM).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Если вам необходимо обработать много данных и вернуть мало результатов, то без хранимых процедур вам не обойтись.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Я не буду спорить с этими достоинствами, т.к. я с ними полностью согласен.&lt;/p&gt;

&lt;p&gt;Но практически все защитники подхода с хранимыми процедурами молчат о недостатках:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/RDBMS&quot;&gt;RDBMS&lt;/a&gt; не выполняют контроль целостности кода хранимой процедуры при изменении схемы данных, от которых хранимая процедура зависит.&lt;/p&gt;

&lt;p&gt;О том, что моя хранимая процедура сломалась я смогу узнать только при попытке ее выполнить. Но что, если уже поздно и версия попала к пользователям? Я думаю пользователи будут разочарованы.&lt;/p&gt;

&lt;p&gt;Чтобы не быть голословным приведу пример (&lt;a href=&quot;http://www.microsoft.com/sqlserver&quot;&gt;MS SQL Server&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;тестовый скрипт. &lt;script src=&quot;https://gist.github.com/2061572.js?file=gistfile1.sql&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;вывод в консоль. &lt;script src=&quot;https://gist.github.com/2061572.js?file=output.txt&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Обратите внимание, что процедура &lt;code&gt;sp_rename&lt;/code&gt; только предупреждает, что что-то может сломаться, но не говорит что именно. А если я просто вручную удалю колонку? Я об этом никогда не узнаю.&lt;/p&gt;

&lt;p&gt;Таким образом при использовании хранимых процедур мне необходимо держать в голове все зависимости между всеми объектами в базе данных и как можно быстрее распространять и актуализировать эти знания между членами команды, включая новобранцев. У последних, IMO, голова просто лопнет от переизбытка информации.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Хранимые процедуры отделены от клиентского кода, который их вызывает.&lt;/p&gt;

&lt;p&gt;Если хранимая процедура была удалена, или переименована, или просто изменились её параметры об ошибках я узнаю только в момент попытки ее выполнения. Обычно хранимые процедуры используются в качестве средства устранения дублирования кода и, как следствие, вызываются разными клиентами. Т.е. в дополнение ко всем связям между объектами мне необходимо держать в голове информацию о всех клиентах и всех хранимых процедурах, которых они вызывают. В общем случае это ведет к тем же последствиям, что и в пункте 1.&lt;/p&gt;

&lt;p&gt;Для того, чтобы посмотреть как ведет себя хранимая процедура, ее код, найти подходящую процедуру и т.п. мне необходимо открыть IDE для моей любимой RDBMS. Т.е. переключить контекст своего внимания. Иногда, когда я таким образом отвлекаюсь я очень долго не могу вернуться к работе.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Хранимые процедуры не переносимы между различными типами RDBMS.&lt;/p&gt;

&lt;p&gt;Вы конечно можете сказать, что это чушь и, от части, будете правы, но только в том случае если вы делает корпоративный или уникальный продукт под заказ.&lt;/p&gt;

&lt;p&gt;Но, очень часто продуктовые компании, разрабатывающие коробочные или близкие к ним кастомизируемые тиражируемые решения, попадают в зависимость от требования клиента: &amp;#8220;Ваш продукт хорош, но он использует &lt;a href=&quot;http://www.oracle.com/us/products/database/index.html&quot;&gt;Oracle&lt;/a&gt;, а мы используем MS SQL и хотелось бы&amp;#8230;.&amp;#8221; В этом случае есть 2,5 возможных развития сюжета: вы говорите, что это не возможно и теряете клиента; вы говорите, что нужно подождать полгода (год, два, &amp;#8230;) и клиент уходит; или остается и вы судорожно начинаете искать специалиста по MS SQL, переписывать ваши хранимые процедуры и так далее.&lt;/p&gt;

&lt;p&gt;При последнем, самом оптимистичном варианте, вам нужно найти &lt;em&gt;дополнительных&lt;/em&gt; людей, иначе вы просто не сможете развивать уже существующую систему. При этом вам будет необходимо как-то достигать согласованности работы обоих систем. Я знаю команды, которые для этого написали &lt;strong&gt;свой&lt;/strong&gt; SQL-подобный язык и транслятор к нему в поддерживаемые системы.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Object-Relational_Mapping&quot;&gt;ORM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&quot;Минусы&quot; ORM:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;ORM не всегда генерирует оптимальные запросы.
Да, это так. Но, большинство современных ORM предоставляют пользователям возможность переключиться на уровень ближе к базе данных, вплоть до написания запросов на SQL и использования хранимых процедур.&lt;/p&gt;

&lt;p&gt;К примеру &lt;a href=&quot;http://nhforge.org&quot;&gt;NHibernate&lt;/a&gt;, которую я считаю лучшей, предоставляет следующие возможности для написания запросов:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/LINQ&quot;&gt;LINQ&lt;/a&gt; - самый высокоуровневый объектный подход к написанию запросов.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nhforge.org/doc/nh/en/index.html#querycriteria&quot;&gt;CriteriaAPI&lt;/a&gt; или &lt;a href=&quot;http://nhforge.org/doc/nh/en/index.html#queryqueryover&quot;&gt;QueryOver&lt;/a&gt; - объектный, но SQL-ориентированный подход.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nhforge.org/doc/nh/en/index.html#queryhql&quot;&gt;HQL&lt;/a&gt; - hibernate query language - SQL-подобный язык для написания запросов.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nhforge.org/doc/nh/en/index.html#querysql&quot;&gt;SQL&lt;/a&gt; - &amp;#8220;голый&amp;#8221; SQL&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nhforge.org/doc/nh/en/index.html#sp_query&quot;&gt;Хранимые процедуры&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Также могу сказать, что кривость и неоптимальность запроса почти всегда напрямую зависит от кривости рук разработчика.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ORM тратит время на трансляцию запросов в SQL
Да, но: это время не такое уж и большое; большинство ORM транслирует запрос в SQL только при первом выполнении запроса, затем они его кэшируют.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ORM - большие страшные монстры, для маленьких проектов, как &amp;#8220;из пушки по воробьям&amp;#8221;&lt;/p&gt;

&lt;p&gt;На это могу возразить то, что существует множество мелких ORM. Так же можно использовать ORM напрямую и не заботится ни о каких DDD и прочих монструозных технологиях. К примеру, использование NHibernate + &lt;a href=&quot;http://fluentnhibernate.org/&quot;&gt;FluentNHibernate&lt;/a&gt; (&lt;a href=&quot;http://wiki.fluentnhibernate.org/Auto_mapping&quot;&gt;автомаппинг&lt;/a&gt;) требует от разработчика написания 2х классов: 1. Конифигурацию NH; 2. Конфигурацию автомапинга. Причем эти классы могут быть практически без изменения кочевать из проекта в проект.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Плюсы ORM для меня (в порядке появления в голове):&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;ORM обеспечивает контроль целостности схемы данных&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ОРМ позволяет работать с данными как с объектами. При этом обеспечивается контроль типов.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Некоторые ORM (EF, LLBLGen Pro) позволяют генерировать строго-типизированные обвертки, для вызова хранимых процедур.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Мне не нужно писать никакого кода на страшном ADO.NET.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Большинство ORM поддерживает несколько типов баз данных.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Применительно к NHibernate:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;NHibernate поддерживает &lt;a href=&quot;http://ayende.com/blog/1686/batching-support-in-nhibernate&quot;&gt;группировку запросов в пакеты&lt;/a&gt; и таким образом уменьшается количество обращений к RDBMS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NHibernate поддерживает &lt;a href=&quot;http://ayende.com/blog/3979/nhibernate-futures&quot;&gt;отложенные запросы&lt;/a&gt;, которые выполнятся только в момент первого обращения к результатам. При этом все отложенные невыполненные запросы выполнятся в одном пакете.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nhibernate.hibernatingrhinos.com/28/first-and-second-level-caching-in-nhibernate&quot;&gt;Second Level Cache&lt;/a&gt; - очень мощный инструмент. В умелых руках, повышает производительность приложения в разы.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;Заключение&lt;/h4&gt;

&lt;p&gt;ORM это не инструмент для замены хранимых процедур и запросов, это инструмент, для их дополнения. Он позволяет писать меньше рутинного однообразного кода - он уже написан за вас. Этот код &lt;em&gt;уже&lt;/em&gt; протестирован множеством разработчиков на различных типах проектов. от мельчайших до сверх-гигантских.&lt;/p&gt;

&lt;p&gt;Если в вашем проекте требуется мощь хранимых процедур, или скриптов написанных на SQL, то всегда используйте их &lt;em&gt;вместе&lt;/em&gt; с, а не &lt;em&gt;вместо&lt;/em&gt; ORM. Также я рекомендую пользоваться хранимыми процедурами только в исключительных ситуациях: только тогда, когда без них не обойтись.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web.Requre - client script dependency framework</title>
   <link href="http://blog.hazzik.ru/2011/10/09/web-requre-client-script-dependency-framework/"/>
   <updated>2011-10-09T21:46:00+12:00</updated>
   <id>http://blog.hazzik.ru/2011/10/09/web-requre-client-script-dependency-framework</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;h1&gt;Что это?&lt;/h1&gt;&lt;h1&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small; font-weight: normal;&quot;&gt;&lt;i&gt;Web.Require&lt;/i&gt; - небольшая библиотечка, для облегчения подключения скриптов в ваше Web-приложение.&lt;/span&gt;&lt;/h1&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: small; font-weight: normal;&quot;&gt;&lt;/span&gt;&lt;br/&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1&gt;Давай примеры!&lt;/h1&gt;&lt;pre class=&quot;brush:html&quot;&gt;&amp;lt;head&amp;gt;&lt;br/&gt;    &amp;lt;title&amp;gt;@ViewBag.Title&amp;lt;/title&amp;gt;&lt;br/&gt;    @Html.RequireStyleSheet(&lt;br/&gt;        Url.Content(&quot;~/Content/reset.css&quot;),&lt;br/&gt;        Url.Content(&quot;~/Content/Site.less&quot;),&lt;br/&gt;        Url.Content(&quot;~/Content/themes/base/minified/jquery.ui.all.min.css&quot;))&lt;br/&gt;&lt;br/&gt;    @Html.RequireScript(&lt;br/&gt;        Url.Content(&quot;~/Scripts/jquery-1.6.4.min.js&quot;), &lt;br/&gt;        Url.Content(&quot;~/Scripts/jquery-ui-1.8.16.min.js&quot;))&lt;br/&gt;&lt;br/&gt;    @Html.OutputRequiredStyleSheets()&lt;br/&gt;    @Html.OutputRequiredScripts()&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;Что тут происходит? Все очень просто: мы подключаем три css и два js файла. Что нам дает такой подход? Почему просто нельзя подключить скрипты в лоб?&lt;br/&gt;&lt;br/&gt;Давайте представим, что какой-то контрол, например ваш кастомный диалог или, datepicker требует для своей работы отдельного скрпта? Как быть?&lt;br/&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Первый вариант - просто в контроле написать &amp;lt;script src=&amp;#8230;/&amp;gt;. А если этот контрол на странице используется несколько раз?&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Второй вариант - просто включить этот скрипт в &amp;lt;head&amp;gt;. А если этот скрпит очень большой и прожорливый и используется не везде? &lt;/li&gt;&lt;/ul&gt;Все очень просто: с помощью &lt;i&gt;Web.Require&lt;/i&gt; совместим оба варианта и решим их проблемы: скрипт подгружается только один раз и только тогда, когда это необходимо. Например:&lt;br/&gt;&lt;br/&gt;&lt;/div&gt;&lt;pre class=&quot;brush:csharp brush:html&quot;&gt;&amp;lt;!--DateTimePicker.cshtml--&amp;gt;&lt;br/&gt;@Html.RequireScript(&lt;br/&gt;    Url.Content(&quot;~/Scripts/jquery-1.6.4.min.js&quot;),&lt;br/&gt;    Url.Content(&quot;~/Scripts/jquery-ui-1.8.16.min.js&quot;),&lt;br/&gt;    Url.Content(&quot;~/Scripts/jquery.ui.datepicker-ru.js&quot;),&lt;br/&gt;    Url.Content(&quot;~/Scripts/DateTimePicker.js&quot;))&lt;/pre&gt;В итоге DateTimePicker.js добавиться в тэг  и наступит всеобщее счастье;)&lt;br/&gt;&lt;br/&gt;&lt;h1&gt;Как установить?&lt;/h1&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; color: #333333; font-family: &#39;Segoe UI&#39;, Tahoma, &#39;Helvetica Neue&#39;, Arial, Helvetica, sans-serif; font-size: 12px; line-height: 12px;&quot;&gt;&lt;/span&gt;&lt;br/&gt;&lt;div class=&quot;commandWrapper&quot; style=&quot;background-attachment: initial; background-clip: initial; background-color: initial; background-image: -webkit-gradient(linear, 0 0, 0 100%, from(rgb(214, 214, 214)), to(rgb(80, 80, 80))); background-origin: initial; border-bottom-color: rgb(255, 255, 255); border-bottom-left-radius: 8px 8px; border-bottom-right-radius: 8px 8px; border-bottom-style: solid; border-bottom-width: 0px; border-color: initial; border-left-color: rgb(255, 255, 255); border-left-style: solid; border-left-width: 0px; border-right-color: rgb(255, 255, 255); border-right-style: solid; border-right-width: 0px; border-style: initial; border-top-color: rgb(255, 255, 255); border-top-left-radius: 8px 8px; border-top-right-radius: 8px 8px; border-top-style: solid; border-top-width: 0px; font-family: inherit; font-size: 12px; font-style: inherit; margin-bottom: 36px; margin-left: 0px; margin-right: 0px; margin-top: 36px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 4px; padding-left: 4px; padding-right: 4px; padding-top: 4px; vertical-align: baseline;&quot;&gt;&lt;div class=&quot;commandPrompt&quot; style=&quot;-webkit-box-shadow: rgba(0, 0, 0, 0.59375) 6px 6px 14px inset, rgb(102, 102, 102) 1px 1px 4px; background-attachment: initial; background-clip: initial; background-color: initial; background-image: -webkit-gradient(linear, 0 0, 0 100%, from(rgb(94, 94, 94)), to(rgb(0, 0, 0))); background-origin: initial; border-bottom-color: rgb(196, 196, 196); border-bottom-left-radius: 6px 6px; border-bottom-right-radius: 6px 6px; border-bottom-style: solid; border-bottom-width: 1px; border-color: initial; border-left-color: rgb(196, 196, 196); border-left-style: solid; border-left-width: 1px; border-right-color: rgb(196, 196, 196); border-right-style: solid; border-right-width: 1px; border-style: initial; border-top-color: rgb(196, 196, 196); border-top-left-radius: 6px 6px; border-top-right-radius: 6px 6px; border-top-style: solid; border-top-width: 1px; box-shadow: rgba(0, 0, 0, 0.59375) 6px 6px 14px inset, rgb(102, 102, 102) 1px 1px 4px; font-family: inherit; font-size: 12px; font-style: inherit; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; text-shadow: rgb(0, 0, 0) 1px 1px 1px; vertical-align: baseline;&quot;&gt;&lt;div class=&quot;command&quot; style=&quot;border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; color: #e2e2e2; font-family: Consolas, &#39;Andale Mono WT&#39;, &#39;Andale Mono&#39;, &#39;Lucida Console&#39;, &#39;Lucida Sans Typewriter&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Liberation Mono&#39;, &#39;Nimbus Mono L&#39;, Monaco, &#39;Courier New&#39;, Courier, monospace; font-size: 24px; font-style: inherit; line-height: 24px; margin-bottom: 24px; margin-left: 8px; margin-right: 8px; margin-top: 24px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;PM&amp;gt; Install-Package Web.Require&lt;/div&gt;&lt;br/&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h1&gt;P.S.&lt;/h1&gt;В будущем ожидаются следующие фишки:&lt;br/&gt;&lt;br/&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Асинхронное подключение js&lt;/li&gt;&lt;li&gt;Конкатенация и минификация js и css + кэширование&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;P.P.S.&lt;/h1&gt;&lt;div&gt;Пример использования можно посмотреть &lt;a href=&quot;https://github.com/hazzik/beerconf-website/&quot;&gt;здесь&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-3477034535813804388?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MvcExtensions: bootstrapping</title>
   <link href="http://blog.hazzik.ru/2011/08/24/mvcextensions-bootstrapping/"/>
   <updated>2011-08-24T13:52:00+12:00</updated>
   <id>http://blog.hazzik.ru/2011/08/24/mvcextensions-bootstrapping</id>
   <content type="html">&lt;p&gt;Как я уже &lt;a href=&quot;/2011/08/20/mvcextensions-intro/&quot;&gt;писал во введении&lt;/a&gt;, весь код, выполняющийся при старте приложения необходимо помещать в, BootstrapperTask.&lt;/p&gt;

&lt;h1&gt;Bootstrapper tasks&lt;/h1&gt;

&lt;p&gt;В MvcExtensions для размещения кода, выполняющегося при запуске приложения существует понятие &lt;a href=&quot;http://en.wikipedia.org/wiki/Bootstrapping_(computing)&quot;&gt;Bootstrapper&lt;/a&gt;, которому можно назначать задачи.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Назначение задачи происходит следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Global.asax.cs
public class MvcApplication : WindsorMvcApplication {
    public MvcApplication() {
        Bootstrapper.BootstrapperTasks
            .Include&amp;lt;RegisterControllers&amp;gt;(); // задача, для регистрации контроллеров в IoC контейнер.
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Кроме стандартной задачи для регистрации контроллеров существует еще несколько стандартных задач, которые подключают дополнительные возможности. Также есть несколько базовых классов, которые позволяют выполняет такие полезные действия, как регистрация маршрутов, фильтров, модел-байндеров, etc.&lt;/p&gt;

&lt;h2&gt;Регистрация маршрутов&lt;/h2&gt;

&lt;p&gt;Для регистрации маршрутов вам необходимо унаследоваться от абстрактного класса &lt;em&gt;RegisterRoutesBase&lt;/em&gt;, и подключить задачу к bootstrapper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class RegisterRoutes : RegisterRoutesBase {
    public RegisterRoutes(RouteCollection routes) 
        : base(routes) { }

    protected override void Register() {
        Routes.IgnoreRoute(&quot;favicon.ico&quot;);
        Routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);
        Routes.MapRoute(&quot;Default&quot;,
            &quot;{controller}/{action}/{id}&quot;,
            new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Конфигурация фильтров&lt;/h2&gt;

&lt;p&gt;Еще одной интересной возможностью MvcExtensions является возможность добавлять фильтры (IMvcFilter) к действиям контроллеров динамически. Этот подход позволяет писать фильтры не через атрибуты, а как обычные классы, при этом появляется возможность использовать инжекцию зависимостей через конструктор. Для регистрации фильтров необходимо унаследоваться от базового абстрактного класса &lt;em&gt;ConfigureFiltersBase&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Рассмотрим небольшой пример:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ConfigureFilters : ConfigureFiltersBase { 
    public ConfigureFilters(IFilterRegistry registry) 
        : base(registry) { }


    protected override void Configure() {
        Registry.Register&amp;lt;ProductController, PopulateCategories, PopulateSuppliers&amp;gt;(c =&amp;gt; c.Create())
                .Register&amp;lt;ProductController, PopulateCategories, PopulateSuppliers&amp;gt;(c =&amp;gt; c.Edit(0));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как видно из примера, для контроллера &lt;em&gt;ProductController&lt;/em&gt; для действий &lt;em&gt;Create&lt;/em&gt; и &lt;em&gt;Edit&lt;/em&gt; регистрируются два фильтра &lt;em&gt;PopulateCategories&lt;/em&gt; и &lt;em&gt;PopulateSuppliers&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Регистрация ModelBinder&lt;/h2&gt;

&lt;p&gt;В жизни бывает всякое и иногда необходимо написать свой ModelBinder, с помощью &lt;em&gt;ConfigureModelBindersBase&lt;/em&gt; вы можете привязать свой ModelBinder к модели.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ConfigureModelBinders : ConfigureModelBindersBase { 
    public ConfigureModelBinders(TypeMappingRegistry&amp;lt;object, IModelBinder&amp;gt; registry)
        : base(registry) { }

    protected override void Configure() {
        Registry.Register&amp;lt;ProductEditModel, ProductEditModelBinder&amp;gt;();
    }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь вроде все понятно.&lt;/p&gt;

&lt;h2&gt;Собственные Bootstrapper tasks&lt;/h2&gt;

&lt;p&gt;Нет ничего проще, чем создать собственные задачи: необходимо просто  унаследоваться от базового класса &lt;em&gt;BootstrapperTask&lt;/em&gt;. Также задачи могут зависеть от других задач, для этого вашу задачу нужно пометить атрибутом [DependsOn]. И главное: н&lt;em&gt;е забудьте зарегистрировать свои задачи в бутстрапер.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[DependsOn(typeof(RegisterRoutes))]
public class ConfigureFiltersBase : BootstrapperTask {
    protected override void Configure() {
        // Ваш код будет здесь
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Вместо заключения&lt;/h1&gt;

&lt;p&gt;На сегодня все. В следующей статье я планирую подробно рассмотреть конфигурацию метаданых.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MvcExtensions: введение</title>
   <link href="http://blog.hazzik.ru/2011/08/20/mvcextensions-intro/"/>
   <updated>2011-08-20T08:00:00+12:00</updated>
   <id>http://blog.hazzik.ru/2011/08/20/mvcextensions-intro</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://mvcextensions.codeplex.com/&quot;&gt;MvcExtensions&lt;/a&gt; - это библиотека расширений для ASP.NET MVC. Библиотека предоставляет пользователю мощнейший инструмент для конфигурирования метаданных для ASP.NET MVC посредством fluent-интерфейса. Второй важной особенностью библиотеки является возведение использования IoC контейнера в абсолют (Можно инжектировать данные даже в атрибуты).&lt;!-- more --&gt;&lt;/p&gt;

&lt;h1&gt;С чего начать?&lt;/h1&gt;

&lt;p&gt;Для начала вам необходимо определится с IoC контейнером, который вы хотите использовать - в MvcExtensions есть адаптеры для следующих популярных IoC контейнеров: &lt;a href=&quot;http://www.castleproject.org/container/&quot;&gt;Castle.Windsor&lt;/a&gt;, &lt;a href=&quot;http://unity.codeplex.com/&quot;&gt;Unity&lt;/a&gt;, &lt;a href=&quot;http://ninject.org/&quot;&gt;Ninject&lt;/a&gt;, &lt;a href=&quot;http://structuremap.net/structuremap/&quot;&gt;StructureMap&lt;/a&gt;. Для этого вам необходимо установить соответствующую версию адаптера через nuget: &lt;a href=&quot;http://nuget.org/List/Packages/mvcextensions.windsor&quot;&gt;Castle.Windsor&lt;/a&gt;, &lt;a href=&quot;http://nuget.org/List/Packages/mvcextensions.unity&quot;&gt;Unity&lt;/a&gt;, &lt;a href=&quot;http://nuget.org/List/Packages/mvcextensions.ninject&quot;&gt;Ninject&lt;/a&gt;, &lt;a href=&quot;http://nuget.org/List/Packages/mvcextensions.structuremap&quot;&gt;StructureMap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Затем вам необходимо унаследовать класс своего приложения от базового приложения для выбранного адаптера, например, &lt;code&gt;MvcExtensions.Windsor.WindsorMvcApplication&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //Global.asax.cs
    public class MvcApplication : WindsorMvcApplication {
        public MvcApplication() {
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;UPD&lt;/strong&gt; По умолчанию в HttpAppication в качестве бутсраппер-методов создаются методы &lt;code&gt;Application_Start&lt;/code&gt; и &lt;code&gt;Application_End&lt;/code&gt;. MvcExtensions предоставляет альтернативные методы для этого &lt;code&gt;OnStart&lt;/code&gt; и &lt;code&gt;OnEnd&lt;/code&gt;. Необходимо использовать их, иначе код в метода &lt;code&gt;Application_Start&lt;/code&gt; и &lt;code&gt;Application_End&lt;/code&gt; &lt;strong&gt;не будет&lt;/strong&gt; вызван.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Инициализируем IoC контейнер&lt;/h1&gt;

&lt;p&gt;Для инициализации вашего любимого IoC контейнера вам необходимо просто реализовать соответствующий интерфейс или унаследоваться от базового класса: &lt;code&gt;IWindsorInstaller&lt;/code&gt;, &lt;code&gt;Ninject.Modules.NinjectModule&lt;/code&gt;, &lt;code&gt;StructureMap.Configuration.DSL.Registry&lt;/code&gt;, &lt;code&gt;Microsoft.Practices.Unity.IModule&lt;/code&gt;. Например для Windosor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public class AccountInstaller : IWindsorInstaller {
        public void Install(IWindsorContainer container, IConfigurationStore store) {
            var registration = Component.For&amp;lt;IAuthenticationService&amp;gt;()
                .ImplementedBy&amp;lt;FormsAuthenticationService&amp;gt;()
                .LifeStyle.Transient;

            container.Register(registration);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Полученные таким образом классы нужно положить в ваше MVC приложение в любую папку, я рекомендую в /Infrastructure. &lt;em&gt;Необходимо запомнить, что контроллеры таким образом инициализировать не требуется!&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;Регистрация контроллеров&lt;/h1&gt;

&lt;p&gt;В MvcExtensions весь код, выполняющийся при старте приложения необходимо помещать в, так называемые, &lt;code&gt;BootstrapperTask&lt;/code&gt;. Существуют некоторые стандартные таски, такие как например регистрация контроллеров. Для того, чтобы проинструктировать MvcExtensions, что вы хотите зарегистрировать свои контроллеры, необходимо всего-лишь включить задачу &lt;code&gt;RegisterControllers&lt;/code&gt; в последовательность задач, выполняемых при старте:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //Global.asax.cs
    public class MvcApplication : WindsorMvcApplication {
        public MvcApplication() {
            Bootstrapper.BootstrapperTasks
                .Include&amp;lt;RegisterControllers&amp;gt;();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;После этого все контроллеры в вашем MVC приложении будут создаваться с помощью IoC контейнера.&lt;/p&gt;

&lt;h1&gt;Метаданные&lt;/h1&gt;

&lt;p&gt;MvcExtensions предлагает пользователям замену стандартному способу конфигурирования метеданных через DataAnnotations, посредством fluent-интерфейса для конфигурирования. Этот подход обладает феноменальной гибкостью и неограниченными возможностями для расширения.&lt;/p&gt;

&lt;p&gt;Для того, чтобы использовать эту возможность в MvcExtensions необходимо также зарегистрировать ее:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //Global.asax.cs
    public class MvcApplication : WindsorMvcApplication {
        public MvcApplication() {
            Bootstrapper.BootstrapperTasks
                .Include&amp;lt;RegisterControllers&amp;gt;()
                .Include&amp;lt;RegisterModelMetadata&amp;gt;();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Затем необходимо написать конфигурацию для ваших форм и моделей отображения:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public class SignUpMetadata : ModelMetadataConfiguration {
        public SignUpMetadata() {
            Configure(x =&amp;gt; x.Login)
                .DisplayName(&quot;Имя пользователя&quot;)
                .Required(&quot;Необходимо указать имя пользователя&quot;);

            Configure(x =&amp;gt; x.Email)
                .DisplayName(&quot;Адрес электронной почты&quot;)
                .Required(&quot;Необходимоуказать адрес электронной почты&quot;)
                .AsEmail();

            Configure(x =&amp;gt; x.Password)
                .DisplayName(&quot;Пароль&quot;)
                .Required(&quot;Необходимо указать пароль&quot;)
                .MinimumLength(6, &quot; Длина пароля должна быть не меньше 6 символов&quot;)
                .AsPassword();

            Configure(x =&amp;gt; x.ConfirmPassword)
                .DisplayName(&quot;Пароль еще раз&quot;)
                .Required(&quot;Необходимо указать подтверждение пароля&quot;)
                .AsPassword()
                .Compare(&quot;Password&quot;, &quot;Пароль и подвтерждение пароля должны совпадать&quot;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Заключение&lt;/h1&gt;

&lt;p&gt;На этом первый этап конфигурирования MvcExtensions завершен. Если что-то осталось непонятно - задавайте вопросы, буду стараться разъяснять.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Бизнес-правила в DDD-2</title>
   <link href="http://blog.hazzik.ru/2010/05/23/ddd-business-rules-2/"/>
   <updated>2010-05-23T15:29:00+12:00</updated>
   <id>http://blog.hazzik.ru/2010/05/23/ddd-business-rules-2</id>
   <content type="html">&lt;p&gt;Продолжу мучить сообщество своими вопросами по DDD дальше. &lt;br/&gt;&lt;br/&gt;Допустим, мы хотим добавить в систему идентификацию не только &lt;a href=&quot;http://blog.hazzik.ru/2010/05/ddd.html&quot;&gt;по адресу электронной почты&lt;/a&gt;, но и по имени пользователя. В связи с этим у нас в системе возникает другое бизнес-правило:&lt;br/&gt;&lt;br/&gt;&lt;i&gt;Имя пользователя является уникальным&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;Это бизнес правило фигурирует в следующих историях использования:&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Пользователь регистрируется в системе, если уже есть другой пользователь с таким именем, то пользователю выводиться сообщение об ошибке.&lt;/li&gt;&lt;li&gt;Пользователь может изменить свое имя, если уже есть другой пользователь с таким именем, то пользователю выводиться сообщение об ошибке.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;Где должна находиться реализация данного бизнес-правила?&lt;br/&gt;&lt;br/&gt;Жду ваших ответов с примерами кода в комментариях.&lt;/p&gt;

&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-6948422760771478543?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Бизнес-правила в DDD</title>
   <link href="http://blog.hazzik.ru/2010/05/21/ddd-business-rules/"/>
   <updated>2010-05-21T22:40:00+12:00</updated>
   <id>http://blog.hazzik.ru/2010/05/21/ddd-business-rules</id>
   <content type="html">&lt;p&gt;У нас в системе есть одно очень интересное и достаточно распространенное бизнес-правило:&lt;br/&gt;&lt;br/&gt;&lt;i&gt;Адрес электронной почты пользователя должен быть уникальным в пределах системы.&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;pre class=&quot;brush:csharp&quot;&gt;public class User : IEntity&lt;br/&gt;{&lt;br/&gt;  public int Id { get; set; }&lt;br/&gt;&lt;br/&gt;  public string Email { get; set; }&lt;br/&gt;&lt;br/&gt;  public string Name { get; set; }&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;Где должна находиться реализация данного бизнес-правила?&lt;br/&gt;&lt;br/&gt;Жду ваших ответов с примерами кода в комментариях.&lt;/p&gt;

&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-1790873962076866235?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP во вселенной .NET</title>
   <link href="http://blog.hazzik.ru/2010/01/24/php-in-dotnet-universe/"/>
   <updated>2010-01-24T18:39:00+12:00</updated>
   <id>http://blog.hazzik.ru/2010/01/24/php-in-dotnet-universe</id>
   <content type="html">&lt;p&gt;Привет, сегодня я хочу рассказать о замечательном проекте &lt;a href=&quot;http://php-compiler.net/&quot;&gt;Phalanger&lt;/a&gt;, который позволил прийти языку программирования &lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt; во вселенную &lt;a href=&quot;http://www.microsoft.com/NET/&quot;&gt;.NET&lt;/a&gt; – и это не шутка! Phalanger – это компилятор PHP в IL-код. &lt;br/&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;Проект активно развивается, и скоро разработчики обещают выпустить новый релиз (предыдущий был в декабре 2008).&lt;br/&gt;&lt;br/&gt;Проект &lt;strong&gt;Phalanger&lt;/strong&gt; это:&lt;br/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Компилятор phpc;&lt;/li&gt;&lt;li&gt;Среда исполнения программ, написанных на PHP;&lt;/li&gt;&lt;li&gt;Расширение языка PHP/CLI;&lt;/li&gt;&lt;li&gt;Компоненты интеграции с Visual Studio.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Компилятор phpc позволяет &lt;strong&gt;компилировать PHP код&lt;/strong&gt; в режиме совместимости (Legacy compilation mode), либо в режиме «чистый .NET» (pure .NET compilation mode). Режим совместимости позволяет любому вашему коду для родного интерпретатора компилироваться и работать без каких-либо проблем. Режим «чистый .NET» привносит более тесную &lt;strong&gt;интеграцию с .NET framework&lt;/strong&gt; – можно использовать код, написанный на PHP/CLI, в других приложениях .NET. &lt;br/&gt;PHP/CLI дополняет PHP такими родными для мира .NET фичами, как генерики, атрибуты и партиал классы (pure mode). &lt;br/&gt;Новый релиз сулит нам следующие вкусности:&lt;br/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Поддержка спецификации PHP версии 5.3.1;&lt;/li&gt;&lt;li&gt;«Утиная» типизация для, еще более тесной, интеграцией с .NET;&lt;/li&gt;&lt;li&gt;Улучшенная интеграция с VS, с поддержкой IntelliSense;&lt;/li&gt;&lt;li&gt;Поддержку Silverlight 2.0;&lt;/li&gt;&lt;li&gt;И, конечно же, исправление багов, найденных с предыдущего релиза.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Также Phalanger уже поддерживает&lt;br/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Разработку WinForms приложений;&lt;/li&gt;&lt;li&gt;Разработку и отладку Silverlight 1.1 приложений;&lt;/li&gt;&lt;li&gt;ASP.NET 2.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;Phalanger совместим со множеством бесплатных CMS, движков блогов и  прочих PHP приложений. Данный проект, возможно, будет полезен тем, кто хочет постепенно изучить платформу .NET Framework и/или перейти на неё полностью c PHP.&lt;/p&gt;

&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-4831830297678179718?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Subversion vs. Git</title>
   <link href="http://blog.hazzik.ru/2010/01/21/subversion-vs-git/"/>
   <updated>2010-01-21T23:21:00+12:00</updated>
   <id>http://blog.hazzik.ru/2010/01/21/subversion-vs-git</id>
   <content type="html">&lt;div&gt;Привет, сегодня я хочу поговорить о двух, по моему мнению, самых успешных системах контроля версий &lt;a href=&quot;http://tortoisesvn.tigris.org/&quot;&gt;Subversion&lt;/a&gt; и &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;. В своей практике я сталкивался с множеством VCS, включая такие экзотические системы как &lt;a href=&quot;http://jedivcs.sourceforge.net/&quot;&gt;Jedi VCS&lt;/a&gt;.  Мой личный путь миграции  можно кратко описать так: &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS &lt;/a&gt;-&amp;gt; SVN -&amp;gt; Git.&lt;/div&gt; &lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br/&gt;&lt;h3&gt;Коммиты&lt;/h3&gt;&lt;br/&gt;&lt;div&gt;Git благодаря наличию локального хранилища позволяет делать «отложенные» коммиты. «Отложенные» коммиты попадают в основное хранилище, только когда вы проталкиваете (push) их туда. Можно делать такие мелкие коммиты, какие вам захочется, не заботясь о том, красная полоска или зеленая – главное, чтобы при проталкивании изменений в основное хранилище полоска была зеленой (вы ведь &lt;a href=&quot;http://testdriven.net/&quot;&gt;пишите тесты&lt;/a&gt;?;)) Таким образом, коммит становиться для разработчика просто &lt;strong&gt;точкой возврата&lt;/strong&gt;.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;В SVN же, коммит должен быть некой &lt;strong&gt;завершенной&lt;/strong&gt; логической единицей, т.к. сразу попадает в основное хранилище, и становиться доступен всей команде разработчиков.&lt;/div&gt;&lt;br/&gt;&lt;h3&gt;Ветки&lt;/h3&gt;&lt;br/&gt;&lt;div&gt;Git обладает очень мощным механизмом ветвления, благодаря чему многие команды разработчиков каждую новую фичу разрабатывают в отдельной ветке, которая сливается с основной только после ее реализации. В основной ветке находиться версия в любой момент готовая к внедрению у заказчика. &lt;/div&gt;&lt;div&gt; В SVN ветки используются в основном для сохранения уже выпущенных версий продукта, а вся разработка ведется в основной ветке, со всеми вытекающими отсюда последствиями.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;h3&gt;Метаданные&lt;/h3&gt;&lt;div&gt;SVN хранит метаданные по каждой папке отдельно в подпапках .svn. Этих метаданных чрезвычайно много, и при интенсивной работе над проектом (у нас каждый делает по 10-15 коммитов в день) файловая система сильно засоряется и часто приходиться производить дефрагментацию. &lt;/div&gt;&lt;br/&gt;&lt;div&gt;Git хранит метаданные более компактно, в одном месте - в подпапке .git корневой директории проекта. Но за всё нужно платить – нельзя скачать часть репозитория как в SVN, только весь. &lt;/div&gt;&lt;h3&gt;Вместо заключения&lt;/h3&gt;&lt;div&gt; Git благодаря своей огромной гибкости подходит для больших и/или распределенных команд, но более сложен в освоении.  &lt;/div&gt;&lt;div&gt;SVN подходит для небольших команд из 2-3 человек, физически находящихся в одном помещении (хотя &lt;a href=&quot;http://www.mono-project.com/&quot;&gt;есть исключения&lt;/a&gt;).  &lt;/div&gt;&lt;div&gt;Для операционных систем Windows для Subversion и Git есть очень удобные графические оболочки, встраивающиеся в проводник – &lt;a href=&quot;http://tortoisesvn.tigris.org/&quot;&gt;TortoiseSVN&lt;/a&gt; и &lt;a href=&quot;http://code.google.com/p/tortoisegit/&quot;&gt;TortoiseGit&lt;/a&gt; соответственно.&lt;/div&gt;&lt;div&gt;Для тех кто хочет мигрировать с SVN на Git в состав Git включена утилита &lt;a href=&quot;http://www.kernel.org/pub/software/scm/git/docs/git-svn.html&quot;&gt;git-svn&lt;/a&gt;, позволяющая делать двустороннюю синхронизацию между хранилищами. &lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-4883705696622664932?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP: тестируем нетестируемое – echo</title>
   <link href="http://blog.hazzik.ru/2010/01/03/php-test-untestable-echo/"/>
   <updated>2010-01-03T21:09:00+12:00</updated>
   <id>http://blog.hazzik.ru/2010/01/03/php-test-untestable-echo</id>
   <content type="html">&lt;p&gt;В данной заметке я хочу рассказать, как тестировать конструкции echo и ей подобные в &lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt;.&lt;br/&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br/&gt;Допустим у нас есть такой код:&lt;br/&gt;&lt;/p&gt;

&lt;pre class=&quot;brush:php&quot;&gt;&lt;br/&gt;class World {&lt;br/&gt; public function printHello() {&lt;br/&gt;   echo &#39;hello world&#39;;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public function printHello2() {&lt;br/&gt;?&amp;gt;&lt;br/&gt;   hello world&lt;br/&gt;&amp;lt;?php&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;//...&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;«Как же нам протестировать методы Hello и Hello2?» – вчера ночью этот вопрос загнал меня в тупик. Немного поразмыслив, я все-таки выкрутился из ситуации – для первого случая достаточно отрефакторить код таким образом, чтобы на вход конструкции &lt;i&gt;echo&lt;/i&gt; подавался результат функции, вычисляющий требуемое значение:&lt;br/&gt;&lt;/p&gt;

&lt;pre class=&quot;brush:php&quot;&gt;&lt;br/&gt;class World {&lt;br/&gt; /** @returns string */&lt;br/&gt; public function getGreeting(){&lt;br/&gt;   return &#39;hello world&#39;;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public function printHello(){&lt;br/&gt;   echo $this-&amp;gt;getGreeting();&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;//...&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;Такой код уже поддается тестированию:&lt;br/&gt;&lt;/p&gt;

&lt;pre class=&quot;brush:php&quot;&gt;&lt;br/&gt;/** @test */&lt;br/&gt;public function getGreetingReturnsHelloWorld () {&lt;br/&gt; $world = new World;&lt;br/&gt;&lt;br/&gt; self::assertEquals(&#39;hello world&#39;, $world-&amp;gt;getGreeting());&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;Но как же быть во втором случае? Во втором случае нам поможет &lt;a href=&quot;http://xunitpatterns.com/indirect%20output.html&quot;&gt;тестирование непрямого вывода &lt;/a&gt;. Перед вызовом тестовой системы добавим вызов функции &lt;i&gt;ob_start()&lt;/i&gt; которая включает буферизированный вывод, а после вызова системы проверим содержимое буфера с помощью вызова функции &lt;i&gt;ob_get_flush()&lt;/i&gt;:&lt;br/&gt;&lt;/p&gt;

&lt;pre class=&quot;brush:php&quot;&gt;&lt;br/&gt;/** @test */&lt;br/&gt;public function hello2InderectTesting () {&lt;br/&gt; $world = new World;&lt;br/&gt;&lt;br/&gt; ob_start();&lt;br/&gt; $world-&amp;gt; printHello2 ();&lt;br/&gt; $actual = ob_get_flush();&lt;br/&gt;&lt;br/&gt; self::assertEquals(&#39;hello world&#39;, $actual);&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;

&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-6514169990731740574?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Причины перехода с LLBLGen Pro на NHibernate</title>
   <link href="http://blog.hazzik.ru/2009/12/31/llblgen-pro-nhibernate/"/>
   <updated>2009-12-31T17:34:00+12:00</updated>
   <id>http://blog.hazzik.ru/2009/12/31/llblgen-pro-nhibernate</id>
   <content type="html">&lt;div&gt;&lt;a href=&quot;http://www.byndyu.ru/&quot;&gt;Мой коллега&lt;/a&gt; уже описал &lt;a href=&quot;http://blog.byndyu.ru/2009/12/llblgen-vs-nhibernate.html&quot;&gt;пару причин&lt;/a&gt;, почему мы постепенно отказываемся от &lt;a href=&quot;http://www.llblgen.com/&quot;&gt;LLBLGen Pro&lt;/a&gt; в пользу &lt;a href=&quot;http://nhforge.org/&quot;&gt;NHibernate&lt;/a&gt;. Хочу добавить свои 50 центов.&lt;/div&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br/&gt;&lt;div&gt;Мы разрабатываем все проекты по методологии &lt;a href=&quot;http://xprogramming.com/&quot;&gt;XP&lt;/a&gt;, активно используем принципы &lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS &lt;/a&gt;и &lt;a href=&quot;http://en.wikipedia.org/wiki/YAGNI&quot;&gt;YAGNI&lt;/a&gt;, поэтому каждый проект, его &lt;a href=&quot;http://domaindrivendesign.org/&quot;&gt;доменная модель&lt;/a&gt; и, соответственно, база данных постоянно развиваются. С LLBLGen Pro нам приходилось генерировать модель несколько раз  в  день и, если одновременно нескольким разработчикам необходимо было что-то изменить – выстраивалась живая очередь.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;С генерируемым кодом очень сложно использовать &lt;a href=&quot;http://www.testdriven.com/&quot;&gt;TDD &lt;/a&gt;– практически невозможно писать тест до кода. Чтобы написать тест необходимо проделать следующие шаги:  добавить таблицу/поле/ограничение в базу; сгенерировать модель и только затем написать тест – это уже не TDD.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;NHibernate, напротив, позволяет применять TDD в полной мере: благодаря тому, что информацию о способе отображения хранит не сама сущность, а некий внешний объект мы можем отдельно разрабатывать доменную модель и отдельно способ ее отображения. При этом сама собой возникает большая гибкость отображения.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Сгенерированный код очень трудно &lt;a href=&quot;http://www.refactoring.com/&quot;&gt;рефакторить&lt;/a&gt;: нельзя просто переименовать сущность/поле/связь – необходимо сначала произвести переименование в проекте, потом в генераторе и затем заново сгенерировать модель.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;NHibernate, же, позволяет переименовывать сущности как вам угодно прямо в Visual Studio (при условии, что для конфигурирования отображения используется &lt;a href=&quot;http://fluentnhibernate.org/&quot;&gt;fluent-nh&lt;/a&gt;) – необходимо будет только удостовериться, что рефакторинг произошел безболезненно – запустить тесты (а у вас ведь они есть ;-)).&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;В LLBLGen Pro все таблицы базы данных отражаются в сущности доменной модели, практически один к одному. &lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Нет поддержки Value Object – т.е. невозможно из одной сущности выделить небольшие однообразные объекты, невозможно использовать связанную таблицу как Value Object. &lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Для отображения связи сущностей m:n используются также вспомогательные сущности, при этом сами коллекции m:n всегда прибывают в состоянии «только чтение»: чтобы добавить или удалить связанную сущность необходимо работать с коллекциями вспомогательных сущностей. &lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Нет поддержки каскадного удаления связанных сущностей – все необходимо делать руками.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;NHibernate лишен всех этих недостатков.&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Вместо заключения&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;Ваш выбор LLBLGen если: &lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;вам нужен очень быстрый старт и проект в дальнейшем не планирует своего развития либо поддержки;&lt;/li&gt;&lt;li&gt;вы разрабатываете проект с использованием тяжеловесных методик типа RUP и всяких там MSF, где вся система заранее детально проработана. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Ваш выбор NHibernate если:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;ваша система находится в непрерывном развитии и вам необходима большая гибкость на уровне ORM&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;PS: всех с Новым годом ;-)&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-4089624053628404827?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Асинхронный ввод-вывод. Проблемы</title>
   <link href="http://blog.hazzik.ru/2009/03/12/async-input-output/"/>
   <updated>2009-03-12T16:09:00+12:00</updated>
   <id>http://blog.hazzik.ru/2009/03/12/async-input-output</id>
   <content type="html">&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: bold;&quot;&gt;Проблема&lt;/span&gt;: допустим вы пишете простой -сервер, который получает какое-то сообщение от клиента, обрабатывает его и что-то ему отправляет. Протокол вы разрабатываете сами, на основе TCP/IP. Встает вопрос что выбрать: синхронные или асинхронные сокеты. Рассмотрим каждый вариант подробнее.&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;Типичная диаграмма последовательности для решаемой задачи&lt;br/&gt;&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://4.bp.blogspot.com/_VEYwyqMSqYM/SbkYU39RC8I/AAAAAAAAAEA/mOfKuhZLlAY/s1600-h/seq.png&quot;&gt;&lt;img style=&quot;margin: 0pt 10px 10px 0pt; float: left; cursor: pointer; width: 161px; height: 320px;&quot; src=&quot;http://4.bp.blogspot.com/_VEYwyqMSqYM/SbkYU39RC8I/AAAAAAAAAEA/mOfKuhZLlAY/s320/seq.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5312303982357580738&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;h4&gt;Синхронные сокеты.&lt;/h4&gt;При работе с синхронными сокетами, при вызове какой-либо операции текущий поток выполнения блокируется, до завершения операции. Ну ничего, решаете вы и выделяете по потоку на каждое соединение (или по два, если нужна независимая отправка). Пока ваше приложение  маленькое, и пользуются им относительно небольшое количество одновременных пользователей, вы счастливы. Но как только количество пользователей переходит какой-то критический барьер - приложение начинает жутко тормозить. Давайте разберемся почему?&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;На каждый поток операционной системой выделяется определенный минимальный объем оперативной памяти (для стека и пр. - около 1 мб), при 500 пользователях это будет 500 МБ, без учета памяти потребляемой клиентом на выполнение своих операций.&lt;/li&gt;&lt;li&gt;Переключение между потоками выполнения занимает какое-то время.&lt;/li&gt;&lt;li&gt;Большинство потоков &amp;#8220;висит&amp;#8221; в ожидании завершения синхронной операции, при этом время на переключение между потоками продолжает тратиться.&lt;/li&gt;&lt;li&gt;Трудность отладки многопоточных приложений.&lt;br/&gt;&lt;/li&gt;&lt;/ol&gt;Для решения этих и других проблем синхронного ввода-вывода и придумали асинхронные вызовы.&lt;br/&gt;&lt;br/&gt;&lt;h4&gt;Асинхронные сокеты&lt;/h4&gt;Для решения проблем выше были придуманы асинхронные сокеты и операции. При вызове асинхронной операции - поток выполнения не блокируется, а продолжает свое выполнение. В большинстве случаев асинхронные вызовы работают через так называемые порты завершения (&lt;span style=&quot;font-style: italic;&quot;&gt;IOCP&lt;/span&gt;). При вызове асинхронной операции сокет ассоциируется с каким-либо портом завершения, сокет будет оповещать этот поток о намерениях завершить операцию. При сигнале от сокета, порт берет из пула потоков (&lt;span style=&quot;font-style: italic;&quot;&gt;thread pool&lt;/span&gt;), свободный поток и завершает операцию (в зависимости от реализации может потребоваться вызвать метод завершения операции).&lt;br/&gt;Что мы от этого выигрываем? Нет потоков ожидающих завершения операции, а следовательно потраченого впустую процессорного времени на переключение между ними; минимальное количество потоков; другие плюшки:)&lt;br/&gt;&lt;h5&gt;Проблемы&lt;/h5&gt;При любом чтении или записи из сокета возвращается МЕНЬШЕЕ или равное ожидаемому количество байт. И если при работе с синхронными сокетами мы могли быть уверены, что получим сообщение полностью, написав цикл, который будет вычитывать строго необходимое количество данных в буфер (также для отправки, включая асинхронную). При асинхронном получении данных такой уверенности нет (при условии, что длина не фиксирована) - приложение просто выплюнет нам какой-то обрывок сообщения, или два, или полтора - как получиться. Таким образом необходимо будет потратить какое-то время на разбор приходящих сообщений.&lt;br/&gt;Вторая проблема - т.к. асинхронные сокеты работают через нативный &lt;span style=&quot;font-style: italic;&quot;&gt;IOCP&lt;/span&gt;, то буферы для приема и отправки будут в состоянии &lt;span style=&quot;font-style: italic;&quot;&gt;pined&lt;/span&gt;. А множество пришпиленых объектов - зло, т.к. будет способствовать фрагментации кучи (подробнее &lt;a href=&quot;https://blogs.msdn.com/yunjin/archive/2004/01/27/63642.aspx&quot;&gt;тут&lt;/a&gt;), поэтому обычно принимается решение выделить один большой буфер, и использовать его постоянно. В .NET 2.0 появилась возможность вместе с асинхронными сокетами использовать &lt;a href=&quot;http://msdn.microsoft.com/ru-ru/library/1hsbd92d.aspx&quot;&gt;ArraySegment{T}&lt;/a&gt;, который может &amp;#8220;разбить&amp;#8221; наш большой буфер на несколько небольших сегментов, но не все так просто, как кажеться - всем этим хозяйством необходимо управлять. Итого нам необходим менеджер сегментов (можно почитать &lt;a href=&quot;http://codebetter.com/blogs/gregyoung/archive/2007/06/18/async-sockets-and-buffer-management.aspx&quot;&gt;тут&lt;/a&gt;), и парсер сообщений.&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-3455392215667477468?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>ASP.NET MVC Controls</title>
   <link href="http://blog.hazzik.ru/2009/03/05/asp-net-mvc-controls/"/>
   <updated>2009-03-05T05:04:00+12:00</updated>
   <id>http://blog.hazzik.ru/2009/03/05/asp-net-mvc-controls</id>
   <content type="html">&lt;p&gt;Привет. На днях вышел ASP.NET MVC RC2, который в связку MVC + WebForms View Engine привнес привычные для ASP.NET-программистов контролы. Контролы лежат во фьчерс паке(он же Microsoft.Web.Mvc).&lt;br/&gt;&lt;br/&gt;Давайте разберемся что нам это даст?&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;+ Design-time preview&lt;br/&gt;+ Исчезнут так называемые code nuggets, все будет выполнено в стиле ASP:)&lt;br/&gt;И самое главное - минусы:&lt;br/&gt;- Скромные возможности data-binding, если с помощью хелперов можно было как-то настроить отображение данных (например привести к верхнему регистру), то тут только as is&lt;br/&gt;- Работают только с вебформами (хотя это скорее фича).&lt;br/&gt;В конечном итоге что использовать: расширения HtmlHelper или MVC Controls решать вам:)&lt;br/&gt;&lt;br/&gt;Подробнее можно почитать у &lt;a href=&quot;http://weblogs.asp.net/leftslipper/archive/2009/03/03/asp-net-mvc-release-candidate-2-i-declare-myself-to-be-declarative.aspx&quot;&gt;Eilon Lipton&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-8132496381224981370?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Разработка динамического sitemap</title>
   <link href="http://blog.hazzik.ru/2009/02/28/sitemap/"/>
   <updated>2009-02-28T14:43:00+12:00</updated>
   <id>http://blog.hazzik.ru/2009/02/28/sitemap</id>
   <content type="html">Что такое sitemap, наверное знают все, кто не знает - может почитать &lt;a href=&quot;http://www.blogger.com/www.sitemaps.org/ru/&quot;&gt;тут&lt;/a&gt; или &lt;a href=&quot;http://www.google.com/support/webmasters/bin/answer.py?answer=40318&amp;amp;topic=13450&quot;&gt;тут&lt;/a&gt;. Итак начнем, для начала создадим пару тестов, для вспомогательных методов&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;[Fact]&lt;br/&gt;public void XDocumentEquals() {&lt;br/&gt; XDocument expected = XDocument.Parse(@&quot;&amp;lt;someTag&amp;gt;A&amp;lt;/someTag&amp;gt;&quot;);&lt;br/&gt; XDocument actual = XDocument.Parse(@&quot;&amp;lt;someTag&amp;gt;A&amp;lt;/someTag&amp;gt;&quot;);&lt;br/&gt; Equal(expected, actual);&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;[Fact]&lt;br/&gt;public void XDocumentNotEquals() {&lt;br/&gt; XDocument expected = XDocument.Parse(@&quot;&amp;lt;someTag&amp;gt;A&amp;lt;/someTag&amp;gt;&quot;);&lt;br/&gt; XDocument actual = XDocument.Parse(@&quot;&amp;lt;someTag&amp;gt;B&amp;lt;/someTag&amp;gt;&quot;);&lt;br/&gt; Assert.Throws&amp;lt;EqualException&amp;gt;(() =&amp;gt; Equal(expected, actual));&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;И затем реализуем этот метод, он нам понадобиться для сравнения экземпляров класса XDocument.&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public static void Equal(XObject expected, XObject actual) {&lt;br/&gt; Assert.Equal(expected.ToString(), actual.ToString());&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;cat&gt;&lt;br/&gt;При форматировании XDocument в строку, по умолчанию стоит кодировка &amp;#8220;utf-16&amp;#8221;, а нам бы хотелось &amp;#8220;utf-8&amp;#8221;, поэтому напишем тест для функции-расширения XDocument.ToXml():&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public class XDocumentExtensionsFacts {&lt;br/&gt; [Fact]&lt;br/&gt; public void ToXml() {&lt;br/&gt;     var expected = @&quot;&amp;lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&amp;gt;&lt;br/&gt; &amp;lt;root /&amp;gt;&quot;;&lt;br/&gt;     var xdoc = new XDocument(new XElement(&quot;root&quot;));&lt;br/&gt;     var actual = xdoc.ToXml();&lt;br/&gt;     Assert.Equal(expected, actual, StringComparer.Create(CultureInfo.CurrentCulture, true));&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;И получим примерно такую реализацию:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public class EncodedStringWriter : StringWriter {&lt;br/&gt; private readonly Encoding _encoding;&lt;br/&gt;&lt;br/&gt; public EncodedStringWriter(Encoding encoding) {&lt;br/&gt;     _encoding = encoding;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public EncodedStringWriter() : this(Encoding.UTF8) {&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public override Encoding Encoding {&lt;br/&gt;     get { return _encoding; }&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public static class XDocumentExtension {&lt;br/&gt; public static string ToXml(this XDocument doc) {&lt;br/&gt;     using(var writer = new EncodedStringWriter()) {&lt;br/&gt;         doc.Save(writer);&lt;br/&gt;         return writer.ToString();&lt;br/&gt;     }&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Создадим класс SiteUrl, который будет хранить информацию о url&amp;#8217;ах сайта, и уметь сериализоваться в XElement, для этого напишем несколько тестов:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public class SiteUrlFacts {&lt;br/&gt; [Fact]&lt;br/&gt; public void Constructor() {&lt;br/&gt;     var expected = new Uri(&quot;http://somesite.com&quot;);&lt;br/&gt;     var target = new SiteUrl(expected);&lt;br/&gt;     Uri actual = target.Location;&lt;br/&gt;     Assert.Equal(expected, actual);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; [Fact]&lt;br/&gt; public void PriorityLessThenZeroThrowsException() {&lt;br/&gt;     var target = new SiteUrl(&quot;http://somesite.com&quot;);&lt;br/&gt;     int illegalPriority = new Random().Next(int.MinValue, 0);&lt;br/&gt;     Assert.True(illegalPriority &amp;lt; 0);&lt;br/&gt;     Assert.Throws&amp;lt;NotSupportedException&amp;gt;(() =&amp;gt; target.Priority = illegalPriority);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; [Fact]&lt;br/&gt; public void PriorityMoreThenOneThrowsException() {&lt;br/&gt;     var target = new SiteUrl(&quot;http://somesite.com&quot;);&lt;br/&gt;     int illegalPriority = new Random().Next(1, int.MaxValue);&lt;br/&gt;     Assert.True(illegalPriority &amp;gt; 1);&lt;br/&gt;     Assert.Throws&amp;lt;NotSupportedException&amp;gt;(() =&amp;gt; target.Priority = illegalPriority);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; [Fact]&lt;br/&gt; public void PrioritySetNormal() {&lt;br/&gt;     var target = new SiteUrl(&quot;http://somesite.com&quot;);&lt;br/&gt;     var normalPriority = (float)(new Random().NextDouble());&lt;br/&gt;     Assert.True(normalPriority &amp;gt;= 0);&lt;br/&gt;     Assert.True(normalPriority &amp;lt;= 1);&lt;br/&gt;     target.Priority = normalPriority;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; [Fact]&lt;br/&gt; public void SerializeHasAllArguments() {&lt;br/&gt;     XElement expected = XElement.Parse(&lt;br/&gt;         @&quot;&amp;lt;url xmlns=&quot;&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&quot;&amp;gt;&lt;br/&gt; &amp;lt;loc&amp;gt;http://www.example.com/&amp;lt;/loc&amp;gt;&lt;br/&gt; &amp;lt;lastmod&amp;gt;2005-01-01T00:00:00 05:00&amp;lt;/lastmod&amp;gt;&lt;br/&gt; &amp;lt;changefreq&amp;gt;monthly&amp;lt;/changefreq&amp;gt;&lt;br/&gt; &amp;lt;priority&amp;gt;0.8&amp;lt;/priority&amp;gt;&lt;br/&gt;&amp;lt;/url&amp;gt;&quot;);&lt;br/&gt;     var siteUrl = new SiteUrl(&quot;http://www.example.com/&quot;) {&lt;br/&gt;         LastModified = new DateTimeOffset(new DateTime(2005, 01, 01)),&lt;br/&gt;         ChangeFrequency = ChangeFrequency.Monthly,&lt;br/&gt;         Priority = 0.8f,&lt;br/&gt;     };&lt;br/&gt;     XElement actual = siteUrl.Serialize();&lt;br/&gt;     XObjectAssert.Equal(expected, actual);&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Ну и соответственно реализация:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public enum ChangeFrequency {&lt;br/&gt; Always,&lt;br/&gt; Hourly,&lt;br/&gt; Daily,&lt;br/&gt; Weekly,&lt;br/&gt; Monthly,&lt;br/&gt; Yearly,&lt;br/&gt; Never,&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public class SiteUrl {&lt;br/&gt; private float? _priority;&lt;br/&gt;&lt;br/&gt; public SiteUrl(string location)&lt;br/&gt;     : this(new Uri(location)) {&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public SiteUrl(Uri location) {&lt;br/&gt;     Location = location;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public Uri Location { get; private set; }&lt;br/&gt; public DateTimeOffset? LastModified { get; set; }&lt;br/&gt; public ChangeFrequency? ChangeFrequency { get; set; }&lt;br/&gt;&lt;br/&gt; public float? Priority {&lt;br/&gt;     get { return _priority; }&lt;br/&gt;     set {&lt;br/&gt;         if(value &amp;lt; 0 || value &amp;gt; 1) {&lt;br/&gt;             throw new NotSupportedException(&quot;Priority must be between 0 and 1&quot;);&lt;br/&gt;         }&lt;br/&gt;         _priority = value;&lt;br/&gt;     }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public virtual XElement Serialize() {&lt;br/&gt;     return new XElement(SiteMapBuilder._sitemap   &quot;url&quot;,&lt;br/&gt;                         new XElement(SiteMapBuilder._sitemap   &quot;loc&quot;, Location),&lt;br/&gt;                         LastModified.HasValue&lt;br/&gt;                             ? new XElement(SiteMapBuilder._sitemap   &quot;lastmod&quot;,&lt;br/&gt;                                            LastModified.Value.ToString(&quot;yyyy-MM-ddTHH:mm:ss%K&quot;))&lt;br/&gt;                             : null,&lt;br/&gt;                         ChangeFrequency.HasValue&lt;br/&gt;                             ? new XElement(SiteMapBuilder._sitemap   &quot;changefreq&quot;,&lt;br/&gt;                                            ChangeFrequency.Value.ToString().ToLower())&lt;br/&gt;                             : null,&lt;br/&gt;                         Priority.HasValue&lt;br/&gt;                             ? new XElement(SiteMapBuilder._sitemap   &quot;priority&quot;,&lt;br/&gt;                                            Priority.Value)&lt;br/&gt;                             : null);&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Дальше необходимо написать класс, который будет уметь сериализовать в XML коллекцию SiteMap&amp;#8217;ов. напишем соответствующие тесты:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public class SiteMapBuilderFacts {&lt;br/&gt; [Fact]&lt;br/&gt; public void CreateEmptySitemap() {&lt;br/&gt;     XDocument expected = XDocument.Parse(&lt;br/&gt;         @&quot;&amp;lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&amp;gt;&lt;br/&gt;&amp;lt;urlset xmlns=&quot;&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&quot; /&amp;gt;&quot;);&lt;br/&gt;     XDocument actual = new SiteMapBuilder(new List&amp;lt;SiteUrl&amp;gt;()).Build();&lt;br/&gt;     XObjectAssert.Equal(expected, actual);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; [Fact]&lt;br/&gt; public void CreateSitemapWithOneElement() {&lt;br/&gt;     XDocument expected =&lt;br/&gt;         XDocument.Parse(&lt;br/&gt;             @&quot;&amp;lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&amp;gt;&lt;br/&gt;&amp;lt;urlset xmlns=&quot;&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&quot;&amp;gt;&lt;br/&gt;&amp;lt;url&amp;gt;&lt;br/&gt;&amp;lt;loc&amp;gt;http://www.example.com/&amp;lt;/loc&amp;gt;&lt;br/&gt;&amp;lt;/url&amp;gt;&lt;br/&gt;&amp;lt;/urlset&amp;gt;&quot;);&lt;br/&gt;     var urlset = new List&amp;lt;SiteUrl&amp;gt; { new SiteUrl(&quot;http://www.example.com/&quot;) };&lt;br/&gt;     XDocument actual = new SiteMapBuilder(urlset).Build();&lt;br/&gt;     XObjectAssert.Equal(expected, actual);&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;И реализуем:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public class SiteMapBuilder {&lt;br/&gt; public static readonly XNamespace _sitemap = &quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;;&lt;br/&gt; private readonly IEnumerable&amp;lt;SiteUrl&amp;gt; _urlset;&lt;br/&gt;&lt;br/&gt; public SiteMapBuilder(IEnumerable&amp;lt;SiteUrl&amp;gt; urlset) {&lt;br/&gt;     _urlset = urlset;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public XDocument Build() {&lt;br/&gt;     return new XDocument(new XElement(_sitemap + &quot;urlset&quot;, _urlset.Select(x =&amp;gt; x.Serialize())));&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;И теперь осталось самое главное - как прикрутить это к ASP.NET? можно так:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;&amp;lt;%@ WebHandler Language=&quot;C#&quot; Class=&quot;SiteMapHandler&quot; %&amp;gt;&lt;br/&gt;using System;&lt;br/&gt;using System.Collections.Generic;&lt;br/&gt;using System.Web;&lt;br/&gt;using Hazzik.SiteMap;&lt;br/&gt;&lt;br/&gt;public class SiteMapHandler : IHttpHandler {&lt;br/&gt; #region IHttpHandler Members&lt;br/&gt;&lt;br/&gt; public void ProcessRequest(HttpContext context) {&lt;br/&gt;     var urlset = new List&amp;lt;SiteUrl&amp;gt; { new SiteUrl(&quot;http://localhost/&quot;) };&lt;br/&gt;     var xml = new SiteMapBuilder(urlset).Build().ToXml();&lt;br/&gt;     HttpResponse response = context.Response;&lt;br/&gt;     response.Clear();&lt;br/&gt;     response.ContentType = &quot;text/xml&quot;;&lt;br/&gt;     response.Write(xml);&lt;br/&gt;     response.End();&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public bool IsReusable {&lt;br/&gt;     get { return true; }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; #endregion&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Для ASP.NET MVC можно написать примерно следующую реализацию ActionResult:&lt;br/&gt;&lt;pre class=&quot;brush:csharp&quot;&gt;public class SiteMapResult : ActionResult {&lt;br/&gt; private readonly IEnumerable&amp;lt;SiteUrl&amp;gt; _map;&lt;br/&gt;&lt;br/&gt; public SiteMapResult(IEnumerable&amp;lt;SiteUrl&amp;gt; map) {&lt;br/&gt;     _map = map;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public IEnumerable&amp;lt;SiteUrl&amp;gt; Map {&lt;br/&gt;     get { return _map; }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; public override void ExecuteResult(ControllerContext context) {&lt;br/&gt;     string xml = new SiteMapBuilder(Map).Build().ToXml();&lt;br/&gt;     HttpResponseBase response = context.HttpContext.Response;&lt;br/&gt;     response.ContentType = &quot;text/xml&quot;;&lt;br/&gt;     response.Write(xml);&lt;br/&gt; }&lt;br/&gt;}&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;Ну а дальше я думаю разберетесь, удачи:)&lt;br/&gt;Строго не серчайте, это моя первая запись на техническую тему, да и русским литературным я не очень хорошо владею:) Замечания и комментарии приветствуются:)&lt;/cat&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width=&quot;1&quot; height=&quot;1&quot; src=&quot;https://blogger.googleusercontent.com/tracker/1624027437398699573-7644707880491400425?l=hazzik.blogspot.com&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</content>
 </entry>
 

</feed>
